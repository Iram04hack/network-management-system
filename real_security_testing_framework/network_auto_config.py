#!/usr/bin/env python3
"""
Configuration Automatique du R√©seau - NMS Security Testing Framework
====================================================================

Ce script configure automatiquement le r√©seau lors du d√©marrage des √©quipements GNS3
pour r√©soudre les probl√®mes de configuration et assurer la connectivit√©.

Commandes ex√©cut√©es automatiquement :
- sudo ip a
- sudo ifconfig tap1 10.255.255.1 netmask 255.255.255.0 up
- sudo ifconfig
- sudo iptables -t nat -A POSTROUTING -o wlp2s0 -j MASQUERADE
- echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward

Mot de passe sudo : root
"""

import subprocess
import logging
import time
import os
import sys
from typing import List, Dict, Any, Optional
from pathlib import Path

logger = logging.getLogger(__name__)

class NetworkAutoConfigurator:
    """
    Configurateur automatique du r√©seau pour le framework de tests de s√©curit√©.
    
    Ex√©cute automatiquement toutes les commandes n√©cessaires pour configurer
    le r√©seau et assurer la connectivit√© entre les √©quipements GNS3.
    """
    
    def __init__(self, sudo_password: str = "root"):
        """
        Initialise le configurateur.
        
        Args:
            sudo_password: Mot de passe sudo (par d√©faut: 'root')
        """
        self.sudo_password = sudo_password
        self.commands_executed = []
        self.errors_encountered = []
        
        logger.info("üîß Configurateur automatique du r√©seau initialis√©")
    
    def execute_sudo_command(self, command: str, description: str = "") -> Dict[str, Any]:
        """
        Ex√©cute une commande avec privil√®ges sudo.
        
        Args:
            command: Commande √† ex√©cuter
            description: Description de la commande
            
        Returns:
            R√©sultat de l'ex√©cution
        """
        try:
            logger.info(f"üîß Ex√©cution: {description or command}")
            
            # Cr√©er la commande compl√®te avec echo du mot de passe
            full_command = f'echo "{self.sudo_password}" | sudo -S {command}'
            
            # Ex√©cuter la commande
            result = subprocess.run(
                full_command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            execution_result = {
                "command": command,
                "description": description,
                "success": result.returncode == 0,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "return_code": result.returncode
            }
            
            if result.returncode == 0:
                logger.info(f"‚úÖ {description or command} - Succ√®s")
                self.commands_executed.append(execution_result)
            else:
                logger.error(f"‚ùå {description or command} - √âchec: {result.stderr}")
                self.errors_encountered.append(execution_result)
            
            return execution_result
            
        except subprocess.TimeoutExpired:
            error_result = {
                "command": command,
                "description": description,
                "success": False,
                "error": "Timeout apr√®s 30 secondes"
            }
            logger.error(f"‚è∞ Timeout pour: {description or command}")
            self.errors_encountered.append(error_result)
            return error_result
            
        except Exception as e:
            error_result = {
                "command": command,
                "description": description,
                "success": False,
                "error": str(e)
            }
            logger.error(f"‚ùå Erreur pour {description or command}: {e}")
            self.errors_encountered.append(error_result)
            return error_result
    
    def configure_network_interfaces(self) -> bool:
        """
        Configure les interfaces r√©seau n√©cessaires.
        
        Returns:
            True si la configuration r√©ussit
        """
        logger.info("üåê Configuration des interfaces r√©seau...")
        
        success = True
        
        # 1. Afficher la configuration IP actuelle
        result = self.execute_sudo_command(
            "ip a",
            "Affichage de la configuration IP actuelle"
        )
        
        # 2. Configurer l'interface tap1
        result = self.execute_sudo_command(
            "ifconfig tap1 10.255.255.1 netmask 255.255.255.0 up",
            "Configuration de l'interface tap1"
        )
        if not result["success"]:
            # Essayer de cr√©er l'interface tap1 si elle n'existe pas
            logger.warning("Interface tap1 introuvable, tentative de cr√©ation...")
            create_result = self.execute_sudo_command(
                "ip tuntap add dev tap1 mode tap",
                "Cr√©ation de l'interface tap1"
            )
            if create_result["success"]:
                # R√©essayer la configuration
                result = self.execute_sudo_command(
                    "ifconfig tap1 10.255.255.1 netmask 255.255.255.0 up",
                    "Configuration de l'interface tap1 (seconde tentative)"
                )
        
        success &= result["success"]
        
        # 3. V√©rifier la configuration avec ifconfig
        result = self.execute_sudo_command(
            "ifconfig",
            "V√©rification de la configuration des interfaces"
        )
        
        return success
    
    def configure_iptables_and_forwarding(self) -> bool:
        """
        Configure iptables et l'IP forwarding.
        
        Returns:
            True si la configuration r√©ussit
        """
        logger.info("üî• Configuration d'iptables et IP forwarding...")
        
        success = True
        
        # 1. Configurer iptables MASQUERADE
        result = self.execute_sudo_command(
            "iptables -t nat -A POSTROUTING -o wlp2s0 -j MASQUERADE",
            "Configuration iptables MASQUERADE sur wlp2s0"
        )
        
        # Si wlp2s0 n'existe pas, essayer avec d'autres interfaces communes
        if not result["success"]:
            common_interfaces = ["eth0", "enp0s3", "wlan0", "ens33"]
            for interface in common_interfaces:
                logger.info(f"Tentative avec l'interface {interface}...")
                result = self.execute_sudo_command(
                    f"iptables -t nat -A POSTROUTING -o {interface} -j MASQUERADE",
                    f"Configuration iptables MASQUERADE sur {interface}"
                )
                if result["success"]:
                    logger.info(f"‚úÖ Configuration r√©ussie avec l'interface {interface}")
                    break
        
        success &= result["success"]
        
        # 2. Activer l'IP forwarding
        result = self.execute_sudo_command(
            "bash -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'",
            "Activation de l'IP forwarding"
        )
        success &= result["success"]
        
        # 3. V√©rifier l'√©tat de l'IP forwarding
        self.execute_sudo_command(
            "cat /proc/sys/net/ipv4/ip_forward",
            "V√©rification de l'IP forwarding"
        )
        
        return success
    
    def configure_additional_network_settings(self) -> bool:
        """
        Configure des param√®tres r√©seau additionnels pour am√©liorer la connectivit√©.
        
        Returns:
            True si la configuration r√©ussit
        """
        logger.info("‚öôÔ∏è Configuration des param√®tres r√©seau additionnels...")
        
        success = True
        
        # 1. Configurer les routes par d√©faut pour les interfaces tap
        result = self.execute_sudo_command(
            "ip route add 192.168.0.0/16 dev tap1 2>/dev/null || true",
            "Ajout de route pour le r√©seau 192.168.0.0/16"
        )
        
        # 2. Configurer les param√®tres de bridge si n√©cessaire
        result = self.execute_sudo_command(
            "modprobe bridge 2>/dev/null || true",
            "Chargement du module bridge"
        )
        
        # 3. Configurer les param√®tres de connectivit√©
        result = self.execute_sudo_command(
            "sysctl -w net.bridge.bridge-nf-call-iptables=0 2>/dev/null || true",
            "Configuration des param√®tres de bridge"
        )
        
        return success
    
    def run_full_network_configuration(self) -> Dict[str, Any]:
        """
        Ex√©cute la configuration compl√®te du r√©seau.
        
        Returns:
            R√©sultat d√©taill√© de la configuration
        """
        start_time = time.time()
        
        logger.info("üöÄ D√âBUT DE LA CONFIGURATION AUTOMATIQUE DU R√âSEAU")
        logger.info("=" * 60)
        
        # 1. Configuration des interfaces
        interfaces_success = self.configure_network_interfaces()
        
        # 2. Configuration iptables et forwarding
        iptables_success = self.configure_iptables_and_forwarding()
        
        # 3. Configuration additionnelle
        additional_success = self.configure_additional_network_settings()
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        # R√©sum√© final
        overall_success = interfaces_success and iptables_success
        successful_commands = len(self.commands_executed)
        failed_commands = len(self.errors_encountered)
        
        result = {
            "overall_success": overall_success,
            "execution_time_seconds": execution_time,
            "successful_commands": successful_commands,
            "failed_commands": failed_commands,
            "commands_executed": self.commands_executed,
            "errors_encountered": self.errors_encountered,
            "interfaces_configured": interfaces_success,
            "iptables_configured": iptables_success,
            "additional_settings": additional_success
        }
        
        # Affichage du r√©sum√©
        logger.info("üìä R√âSUM√â DE LA CONFIGURATION")
        logger.info("=" * 60)
        logger.info(f"Statut global: {'‚úÖ SUCC√àS' if overall_success else '‚ùå √âCHEC PARTIEL'}")
        logger.info(f"Temps d'ex√©cution: {execution_time:.2f} secondes")
        logger.info(f"Commandes r√©ussies: {successful_commands}")
        logger.info(f"Commandes √©chou√©es: {failed_commands}")
        logger.info(f"Interfaces r√©seau: {'‚úÖ' if interfaces_success else '‚ùå'}")
        logger.info(f"IPTables/Forwarding: {'‚úÖ' if iptables_success else '‚ùå'}")
        
        if self.errors_encountered:
            logger.warning("‚ö†Ô∏è ERREURS RENCONTR√âES:")
            for error in self.errors_encountered:
                logger.warning(f"   - {error['description']}: {error.get('error', error.get('stderr', 'Erreur inconnue'))}")
        
        logger.info("=" * 60)
        
        return result
    
    def verify_network_configuration(self) -> Dict[str, Any]:
        """
        V√©rifie que la configuration r√©seau est correcte.
        
        Returns:
            R√©sultat de la v√©rification
        """
        logger.info("üîç V√©rification de la configuration r√©seau...")
        
        verification_results = {}
        
        # 1. V√©rifier l'existence de l'interface tap1
        result = self.execute_sudo_command(
            "ip link show tap1",
            "V√©rification de l'interface tap1"
        )
        verification_results["tap1_exists"] = result["success"]
        
        # 2. V√©rifier l'IP forwarding
        result = self.execute_sudo_command(
            "cat /proc/sys/net/ipv4/ip_forward",
            "V√©rification de l'IP forwarding"
        )
        verification_results["ip_forward_enabled"] = (
            result["success"] and "1" in result.get("stdout", "")
        )
        
        # 3. V√©rifier les r√®gles iptables
        result = self.execute_sudo_command(
            "iptables -t nat -L POSTROUTING",
            "V√©rification des r√®gles iptables"
        )
        verification_results["iptables_configured"] = (
            result["success"] and "MASQUERADE" in result.get("stdout", "")
        )
        
        # 4. Test de connectivit√© basique
        result = self.execute_sudo_command(
            "ping -c 1 127.0.0.1",
            "Test de connectivit√© basique"
        )
        verification_results["basic_connectivity"] = result["success"]
        
        return verification_results

def main():
    """Point d'entr√©e principal du script."""
    # Configuration du logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    try:
        # Cr√©er le configurateur
        configurator = NetworkAutoConfigurator()
        
        # Ex√©cuter la configuration compl√®te
        result = configurator.run_full_network_configuration()
        
        # V√©rifier la configuration
        verification = configurator.verify_network_configuration()
        
        print("\n" + "="*60)
        print("üéØ CONFIGURATION AUTOMATIQUE DU R√âSEAU TERMIN√âE")
        print("="*60)
        print(f"Statut: {'‚úÖ SUCC√àS' if result['overall_success'] else '‚ùå √âCHEC PARTIEL'}")
        print(f"Commandes r√©ussies: {result['successful_commands']}")
        print(f"Commandes √©chou√©es: {result['failed_commands']}")
        print(f"Temps d'ex√©cution: {result['execution_time_seconds']:.2f}s")
        print("\nüîç V√âRIFICATIONS:")
        for check, status in verification.items():
            print(f"   {check}: {'‚úÖ' if status else '‚ùå'}")
        print("="*60)
        
        # Code de sortie
        exit_code = 0 if result['overall_success'] else 1
        sys.exit(exit_code)
        
    except KeyboardInterrupt:
        print("\nüõë Configuration interrompue par l'utilisateur")
        sys.exit(130)
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()