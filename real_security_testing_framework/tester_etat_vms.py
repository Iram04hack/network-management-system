#!/usr/bin/env python3
"""
Script pour tester l'√©tat r√©el des VMs QEMU via VNC et diagnostiquer les probl√®mes de communication
"""
import requests
import json
import telnetlib
import socket
import time
import subprocess

# Configuration
gns3_server = 'http://localhost:3080'
project_id = '6b858ee5-4a49-4f72-b437-8dcd8d876bad'

def get_qemu_nodes_with_console():
    """R√©cup√®re les n≈ìuds QEMU avec leurs informations de console"""
    try:
        response = requests.get(f'{gns3_server}/v2/projects/{project_id}/nodes')
        if response.status_code == 200:
            nodes = response.json()
            qemu_nodes = []
            
            for node in nodes:
                if node['node_type'] == 'qemu':
                    # R√©cup√©rer les d√©tails complets
                    detail_response = requests.get(f'{gns3_server}/v2/projects/{project_id}/nodes/{node["node_id"]}')
                    if detail_response.status_code == 200:
                        details = detail_response.json()
                        qemu_nodes.append(details)
                        
            return qemu_nodes
        else:
            print(f"‚ùå Erreur API: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        return []

def test_vnc_connection(node):
    """Teste la connexion VNC et essaie de capturer l'√©tat de l'√©cran"""
    name = node['name']
    console_port = node.get('console', 0)
    console_host = node.get('console_host', '192.168.122.95')
    
    print(f"\nüñ•Ô∏è TEST VNC {name}")
    print(f"   Connexion: {console_host}:{console_port}")
    
    try:
        # Test de connexion basique
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex((console_host, console_port))
        sock.close()
        
        if result == 0:
            print(f"   ‚úÖ Port VNC accessible")
            
            # Essayer de voir si on peut d√©tecter l'activit√©
            # Via un client VNC simple ou screenshot si possible
            try:
                # Utiliser vncviewer pour un test rapide si disponible
                vnc_test = subprocess.run(
                    ['timeout', '3', 'vncviewer', f'{console_host}:{console_port-5900}', '-ViewOnly', '-passwd', '/dev/null'],
                    capture_output=True, text=True, timeout=5
                )
                print(f"   üì∫ Test client VNC: {vnc_test.returncode}")
            except:
                print(f"   üì∫ Client VNC non disponible pour test")
            
            return True
        else:
            print(f"   ‚ùå Port VNC inaccessible")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur VNC: {e}")
        return False

def test_console_activity(node):
    """Teste l'activit√© de la console en envoyant des commandes simples"""
    name = node['name']
    console_port = node.get('console', 0)
    console_host = node.get('console_host', '192.168.122.95')
    console_type = node.get('console_type', 'vnc')
    
    print(f"\n‚å®Ô∏è TEST ACTIVIT√â CONSOLE {name}")
    
    if console_type == 'telnet':
        return test_telnet_activity(name, console_host, console_port)
    elif console_type == 'vnc':
        # Pour VNC, on ne peut pas facilement envoyer des commandes
        # mais on peut v√©rifier la disponibilit√©
        print(f"   üì∫ Console VNC - v√©rification de base")
        return test_vnc_connection_simple(console_host, console_port)
    else:
        print(f"   ‚ùå Type de console non support√©: {console_type}")
        return False

def test_telnet_activity(name, host, port):
    """Teste l'activit√© via telnet"""
    try:
        print(f"   üì° Connexion telnet {host}:{port}")
        tn = telnetlib.Telnet(host, port, timeout=5)
        
        # Envoyer quelques commandes de base
        commands = [b'\r\n', b'help\r\n', b'?\r\n', b'show version\r\n']
        
        responses = []
        for cmd in commands:
            tn.write(cmd)
            time.sleep(1)
            try:
                response = tn.read_very_eager().decode('utf-8', errors='ignore')
                if response.strip():
                    responses.append(response[:100])  # Limiter la taille
            except:
                pass
        
        tn.close()
        
        if responses:
            print(f"   ‚úÖ Console active - {len(responses)} r√©ponses re√ßues")
            for i, resp in enumerate(responses[:2]):  # Montrer max 2 r√©ponses
                print(f"      {i+1}: {resp[:50]}...")
            return True
        else:
            print(f"   ‚ö†Ô∏è Console connect√©e mais aucune r√©ponse")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur telnet: {e}")
        return False

def test_vnc_connection_simple(host, port):
    """Test simple de connexion VNC"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except:
        return False

def check_vm_network_from_host():
    """V√©rifie la connectivit√© r√©seau depuis la machine h√¥te"""
    print(f"\nüåê TEST CONNECTIVIT√â R√âSEAU DEPUIS L'H√îTE")
    
    # IPs suppos√©es des VMs selon les logs
    vm_ips = {
        'SW-DMZ': '192.168.12.1',
        'Server-Mail': '192.168.10.11', 
        'Server-DNS': '192.168.11.11',
        'SW-LAN': '192.168.21.1',
        'SW-SERVER': '192.168.31.1',
        'SW-ADMIN': '192.168.41.1',
        'Server-DB': '192.168.30.10',
        'PostTest': '192.168.32.10',
        'Server-Web': '192.168.10.10',
        'Server-Fichiers': '192.168.31.10'
    }
    
    reachable = 0
    total = len(vm_ips)
    
    for vm_name, ip in vm_ips.items():
        try:
            # Test ping simple
            ping_result = subprocess.run(
                ['ping', '-c', '1', '-W', '2', ip],
                capture_output=True, text=True, timeout=5
            )
            
            if ping_result.returncode == 0:
                print(f"   ‚úÖ {vm_name} ({ip}): ACCESSIBLE")
                reachable += 1
            else:
                print(f"   ‚ùå {vm_name} ({ip}): INACCESSIBLE")
                
        except Exception as e:
            print(f"   ‚ùå {vm_name} ({ip}): ERREUR - {e}")
    
    print(f"\n   üìä R√©sultat: {reachable}/{total} VMs accessibles depuis l'h√¥te ({reachable/total*100:.1f}%)")
    return reachable, total

def diagnose_vm_boot_state():
    """Diagnostic de l'√©tat de boot des VMs"""
    print(f"\nüîç DIAGNOSTIC √âTAT DE BOOT DES VMs")
    
    qemu_nodes = get_qemu_nodes_with_console()
    
    vm_states = {}
    
    for node in qemu_nodes:
        name = node['name']
        status = node.get('status', 'unknown')
        
        print(f"\n--- {name} ---")
        print(f"Statut GNS3: {status}")
        
        if status == 'started':
            # Tester la console
            console_active = test_console_activity(node)
            vm_states[name] = {
                'gns3_status': status,
                'console_active': console_active
            }
        else:
            print(f"‚ö†Ô∏è VM non d√©marr√©e dans GNS3")
            vm_states[name] = {
                'gns3_status': status,
                'console_active': False
            }
    
    return vm_states

def main():
    print("=== DIAGNOSTIC COMPLET √âTAT DES VMs ===")
    
    # 1. √âtat de boot des VMs
    vm_states = diagnose_vm_boot_state()
    
    # 2. Test connectivit√© r√©seau
    reachable, total = check_vm_network_from_host()
    
    # 3. R√©sum√© et analyse
    print(f"\n" + "="*60)
    print(f"üìã R√âSUM√â DU DIAGNOSTIC")
    print(f"="*60)
    
    active_vms = sum(1 for state in vm_states.values() if state['console_active'])
    started_vms = sum(1 for state in vm_states.values() if state['gns3_status'] == 'started')
    
    print(f"VMs d√©marr√©es dans GNS3: {started_vms}/{len(vm_states)}")
    print(f"VMs avec console active: {active_vms}/{len(vm_states)}")
    print(f"VMs accessibles r√©seau: {reachable}/{total}")
    
    # Identifier les probl√®mes
    problems = []
    
    if started_vms < len(vm_states):
        problems.append("Certaines VMs ne sont pas d√©marr√©es dans GNS3")
    
    if active_vms < started_vms:
        problems.append("Certaines VMs d√©marr√©es n'ont pas de console active")
    
    if reachable < total:
        problems.append("Certaines VMs ne sont pas accessibles via r√©seau")
    
    if problems:
        print(f"\n‚ùå PROBL√àMES IDENTIFI√âS:")
        for i, problem in enumerate(problems, 1):
            print(f"   {i}. {problem}")
    else:
        print(f"\n‚úÖ AUCUN PROBL√àME MAJEUR D√âTECT√â")
    
    # Recommandations
    print(f"\nüîß RECOMMANDATIONS:")
    
    if active_vms == 0:
        print("1. Les VMs semblent √™tre en cours de boot ou ont besoin de configuration")
        print("2. V√©rifier manuellement via VNC si les VMs sont au login")
        print("3. Configurer les VMs avec un utilisateur/mot de passe")
    elif reachable == 0:
        print("1. Les VMs sont actives mais pas configur√©es r√©seau")
        print("2. Configurer les interfaces r√©seau dans chaque VM")
        print("3. V√©rifier le routage et les VLANs")
    else:
        print("1. Les VMs semblent fonctionnelles")
        print("2. Le probl√®me peut √™tre dans les scripts d'automatisation")
        print("3. V√©rifier les credentials et m√©thodes de connexion")

if __name__ == "__main__":
    main()