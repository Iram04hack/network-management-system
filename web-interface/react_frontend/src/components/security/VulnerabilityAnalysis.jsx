// VulnerabilityAnalysis.jsx - Analyse des vulnérabilités avec scan et évaluation
import React, { useState, useEffect, useCallback } from 'react';
import { 
  Shield, 
  AlertTriangle, 
  Search, 
  Play, 
  Pause, 
  RefreshCw,
  Eye,
  Settings,
  Filter,
  TrendingUp,
  TrendingDown,
  Target,
  Database,
  Server,
  Globe,
  Clock,
  CheckCircle,
  XCircle,
  AlertCircle,
  FileText,
  Download,
  Upload,
  Zap,
  Activity,
  Bug,
  Lock,
  Unlock,
  Layers,
  Monitor,
  Terminal,
  Calendar,
  BarChart3,
  PieChart,
  LineChart
} from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart as RechartsPieChart, Pie, Cell, LineChart as RechartsLineChart, Line } from 'recharts';
import { useTheme } from '../../contexts/ThemeContext';

const VulnerabilityAnalysis = ({ isVisible = true }) => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanType, setScanType] = useState('comprehensive');
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [filterSeverity, setFilterSeverity] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState('severity');
  const [scanHistory, setScanHistory] = useState([]);
  const [activeTab, setActiveTab] = useState('vulnerabilities');

  const { getThemeClasses } = useTheme();

  // Niveaux de sévérité
  const severityLevels = {
    'critical': { label: 'Critique', color: 'text-red-400', bgColor: 'bg-red-900/30', chartColor: '#EF4444' },
    'high': { label: 'Élevée', color: 'text-orange-400', bgColor: 'bg-orange-900/30', chartColor: '#F97316' },
    'medium': { label: 'Moyenne', color: 'text-yellow-400', bgColor: 'bg-yellow-900/30', chartColor: '#EAB308' },
    'low': { label: 'Faible', color: 'text-green-400', bgColor: 'bg-green-900/30', chartColor: '#22C55E' },
    'info': { label: 'Info', color: 'text-blue-400', bgColor: 'bg-blue-900/30', chartColor: '#3B82F6' }
  };

  // Types de scans
  const scanTypes = {
    'quick': { label: 'Scan Rapide', duration: '5-10 min', description: 'Scan des vulnérabilités communes' },
    'comprehensive': { label: 'Scan Complet', duration: '30-60 min', description: 'Analyse approfondie de toutes les vulnérabilités' },
    'custom': { label: 'Scan Personnalisé', duration: 'Variable', description: 'Scan avec paramètres personnalisés' }
  };

  // Données mockées des vulnérabilités
  const mockVulnerabilities = [
    {
      id: 'CVE-2023-44487',
      title: 'HTTP/2 Rapid Reset Attack',
      severity: 'critical',
      cvss: 9.8,
      description: 'Une vulnérabilité dans les implémentations HTTP/2 permet des attaques de déni de service',
      affected: ['nginx/1.18.0', 'Apache/2.4.41'],
      status: 'open',
      discovered: '2024-01-15T10:30:00Z',
      category: 'Network',
      exploitability: 'High',
      impact: 'High',
      solution: 'Mettre à jour vers les versions corrigées ou désactiver HTTP/2',
      references: ['CVE-2023-44487', 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-44487'],
      scanEngine: 'Nessus',
      hostCount: 3,
      ports: [80, 443]
    },
    {
      id: 'CVE-2023-4911',
      title: 'GNU C Library Buffer Overflow',
      severity: 'high',
      cvss: 7.8,
      description: 'Débordement de buffer dans la fonction de traitement des variables d\'environnement',
      affected: ['glibc 2.35'],
      status: 'patched',
      discovered: '2024-01-14T14:15:00Z',
      category: 'System',
      exploitability: 'Medium',
      impact: 'High',
      solution: 'Installer les correctifs de sécurité pour glibc',
      references: ['CVE-2023-4911'],
      scanEngine: 'OpenVAS',
      hostCount: 5,
      ports: []
    },
    {
      id: 'CVE-2023-38545',
      title: 'Curl SOCKS5 Heap Buffer Overflow',
      severity: 'high',
      cvss: 8.1,
      description: 'Débordement de buffer dans la gestion des proxy SOCKS5',
      affected: ['curl 7.69.0 - 8.3.0'],
      status: 'mitigated',
      discovered: '2024-01-13T09:45:00Z',
      category: 'Application',
      exploitability: 'Medium',
      impact: 'High',
      solution: 'Mettre à jour curl vers la version 8.4.0 ou supérieure',
      references: ['CVE-2023-38545'],
      scanEngine: 'Nessus',
      hostCount: 8,
      ports: []
    },
    {
      id: 'CVE-2023-5363',
      title: 'OpenSSL X.509 Certificate Validation Bypass',
      severity: 'medium',
      cvss: 6.5,
      description: 'Contournement de la validation des certificats X.509',
      affected: ['OpenSSL 3.0.0 - 3.0.11'],
      status: 'open',
      discovered: '2024-01-12T16:20:00Z',
      category: 'Crypto',
      exploitability: 'Low',
      impact: 'Medium',
      solution: 'Mettre à jour OpenSSL vers 3.0.12 ou supérieure',
      references: ['CVE-2023-5363'],
      scanEngine: 'OpenVAS',
      hostCount: 12,
      ports: [443, 993, 995]
    },
    {
      id: 'SCAN-2024-001',
      title: 'Weak SSL/TLS Configuration',
      severity: 'medium',
      cvss: 5.3,
      description: 'Configuration SSL/TLS faible avec chiffrements obsolètes',
      affected: ['Apache/2.4.41', 'nginx/1.18.0'],
      status: 'open',
      discovered: '2024-01-11T11:10:00Z',
      category: 'Configuration',
      exploitability: 'Low',
      impact: 'Medium',
      solution: 'Configurer des suites de chiffrement modernes et désactiver les protocoles obsolètes',
      references: ['OWASP SSL/TLS Guidelines'],
      scanEngine: 'SSLyze',
      hostCount: 6,
      ports: [443]
    }
  ];

  // Données mockées de l'historique des scans
  const mockScanHistory = [
    {
      id: 'scan-001',
      timestamp: '2024-01-15T10:00:00Z',
      type: 'comprehensive',
      duration: 2340, // secondes
      targets: 25,
      vulnerabilities: 15,
      status: 'completed',
      engine: 'Nessus',
      critical: 1,
      high: 3,
      medium: 7,
      low: 4
    },
    {
      id: 'scan-002',
      timestamp: '2024-01-14T14:00:00Z',
      type: 'quick',
      duration: 480,
      targets: 25,
      vulnerabilities: 8,
      status: 'completed',
      engine: 'OpenVAS',
      critical: 0,
      high: 2,
      medium: 4,
      low: 2
    },
    {
      id: 'scan-003',
      timestamp: '2024-01-13T09:00:00Z',
      type: 'comprehensive',
      duration: 2100,
      targets: 25,
      vulnerabilities: 12,
      status: 'completed',
      engine: 'Nessus',
      critical: 1,
      high: 4,
      medium: 5,
      low: 2
    }
  ];

  // Initialisation des données
  useEffect(() => {
    setVulnerabilities(mockVulnerabilities);
    setScanHistory(mockScanHistory);
  }, []);

  // Simulation du scan
  const handleStartScan = useCallback(() => {
    setIsScanning(true);
    setScanProgress(0);
    
    const interval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          // Ajouter le résultat du scan à l'historique
          const newScan = {
            id: `scan-${Date.now()}`,
            timestamp: new Date().toISOString(),
            type: scanType,
            duration: Math.floor(Math.random() * 3000) + 300,
            targets: 25,
            vulnerabilities: Math.floor(Math.random() * 20) + 5,
            status: 'completed',
            engine: 'Nessus',
            critical: Math.floor(Math.random() * 3),
            high: Math.floor(Math.random() * 5) + 1,
            medium: Math.floor(Math.random() * 8) + 2,
            low: Math.floor(Math.random() * 6) + 1
          };
          setScanHistory(prev => [newScan, ...prev]);
          return 100;
        }
        return prev + Math.random() * 5;
      });
    }, 200);
  }, [scanType]);

  // Filtrage des vulnérabilités
  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSeverity = filterSeverity === 'all' || vuln.severity === filterSeverity;
    const matchesStatus = filterStatus === 'all' || vuln.status === filterStatus;
    const matchesSearch = searchQuery === '' || 
      vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vuln.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vuln.description.toLowerCase().includes(searchQuery.toLowerCase());
    
    return matchesSeverity && matchesStatus && matchesSearch;
  });

  // Tri des vulnérabilités
  const sortedVulnerabilities = [...filteredVulnerabilities].sort((a, b) => {
    switch (sortBy) {
      case 'severity':
        const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
        return severityOrder[b.severity] - severityOrder[a.severity];
      case 'cvss':
        return b.cvss - a.cvss;
      case 'discovered':
        return new Date(b.discovered) - new Date(a.discovered);
      case 'title':
        return a.title.localeCompare(b.title);
      default:
        return 0;
    }
  });

  // Statistiques des vulnérabilités
  const vulnerabilityStats = {
    total: vulnerabilities.length,
    critical: vulnerabilities.filter(v => v.severity === 'critical').length,
    high: vulnerabilities.filter(v => v.severity === 'high').length,
    medium: vulnerabilities.filter(v => v.severity === 'medium').length,
    low: vulnerabilities.filter(v => v.severity === 'low').length,
    open: vulnerabilities.filter(v => v.status === 'open').length,
    patched: vulnerabilities.filter(v => v.status === 'patched').length,
    mitigated: vulnerabilities.filter(v => v.status === 'mitigated').length
  };

  // Données pour les graphiques
  const severityChartData = [
    { name: 'Critique', value: vulnerabilityStats.critical, color: severityLevels.critical.chartColor },
    { name: 'Élevée', value: vulnerabilityStats.high, color: severityLevels.high.chartColor },
    { name: 'Moyenne', value: vulnerabilityStats.medium, color: severityLevels.medium.chartColor },
    { name: 'Faible', value: vulnerabilityStats.low, color: severityLevels.low.chartColor }
  ];

  const trendData = scanHistory.slice(0, 7).reverse().map(scan => ({
    date: new Date(scan.timestamp).toLocaleDateString(),
    vulnerabilities: scan.vulnerabilities,
    critical: scan.critical,
    high: scan.high,
    medium: scan.medium,
    low: scan.low
  }));

  // Composant des métriques principales
  const VulnerabilityMetrics = () => (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
      <div className={`${getThemeClasses('card', 'dashboard')} p-4`}>
        <div className="flex items-center justify-between mb-2">
          <h3 className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm font-medium`}>
            Total Vulnérabilités
          </h3>
          <Bug className="w-5 h-5 text-blue-400" />
        </div>
        <div className="flex items-center space-x-2">
          <span className="text-2xl font-bold text-blue-400">
            {vulnerabilityStats.total}
          </span>
          <TrendingUp className="w-4 h-4 text-green-400" />
        </div>
        <p className={`text-xs ${getThemeClasses('textSecondary', 'dashboard')} mt-1`}>
          Depuis le dernier scan
        </p>
      </div>

      <div className={`${getThemeClasses('card', 'dashboard')} p-4`}>
        <div className="flex items-center justify-between mb-2">
          <h3 className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm font-medium`}>
            Critiques
          </h3>
          <AlertTriangle className="w-5 h-5 text-red-400" />
        </div>
        <div className="flex items-center space-x-2">
          <span className="text-2xl font-bold text-red-400">
            {vulnerabilityStats.critical}
          </span>
          <TrendingDown className="w-4 h-4 text-red-400" />
        </div>
        <p className={`text-xs ${getThemeClasses('textSecondary', 'dashboard')} mt-1`}>
          Correction immédiate requise
        </p>
      </div>

      <div className={`${getThemeClasses('card', 'dashboard')} p-4`}>
        <div className="flex items-center justify-between mb-2">
          <h3 className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm font-medium`}>
            Non corrigées
          </h3>
          <XCircle className="w-5 h-5 text-orange-400" />
        </div>
        <div className="flex items-center space-x-2">
          <span className="text-2xl font-bold text-orange-400">
            {vulnerabilityStats.open}
          </span>
          <TrendingUp className="w-4 h-4 text-orange-400" />
        </div>
        <p className={`text-xs ${getThemeClasses('textSecondary', 'dashboard')} mt-1`}>
          Nécessitent une attention
        </p>
      </div>

      <div className={`${getThemeClasses('card', 'dashboard')} p-4`}>
        <div className="flex items-center justify-between mb-2">
          <h3 className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm font-medium`}>
            Corrigées
          </h3>
          <CheckCircle className="w-5 h-5 text-green-400" />
        </div>
        <div className="flex items-center space-x-2">
          <span className="text-2xl font-bold text-green-400">
            {vulnerabilityStats.patched + vulnerabilityStats.mitigated}
          </span>
          <TrendingUp className="w-4 h-4 text-green-400" />
        </div>
        <p className={`text-xs ${getThemeClasses('textSecondary', 'dashboard')} mt-1`}>
          Sécurisées avec succès
        </p>
      </div>
    </div>
  );

  // Composant de contrôle du scan
  const ScanControls = () => (
    <div className={`${getThemeClasses('card', 'dashboard')} p-4 mb-6`}>
      <div className="flex items-center justify-between mb-4">
        <div>
          <h3 className={`${getThemeClasses('text', 'dashboard')} text-lg font-semibold`}>
            Scanner de Vulnérabilités
          </h3>
          <p className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm`}>
            Analyser les vulnérabilités de sécurité du réseau
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <select
            value={scanType}
            onChange={(e) => setScanType(e.target.value)}
            className="px-3 py-2 bg-gray-800 border border-gray-600 rounded focus:border-blue-500 focus:outline-none"
            disabled={isScanning}
          >
            {Object.entries(scanTypes).map(([key, type]) => (
              <option key={key} value={key}>{type.label}</option>
            ))}
          </select>
          <button
            onClick={handleStartScan}
            disabled={isScanning}
            className={`flex items-center space-x-2 px-4 py-2 rounded transition-colors ${
              isScanning 
                ? 'bg-gray-600 cursor-not-allowed' 
                : 'bg-blue-600 hover:bg-blue-700'
            } text-white`}
          >
            {isScanning ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
            <span>{isScanning ? 'Scan en cours...' : 'Démarrer le scan'}</span>
          </button>
        </div>
      </div>
      
      {scanType && (
        <div className="mb-4 p-3 bg-gray-700/50 rounded">
          <div className="flex items-center justify-between">
            <span className={`${getThemeClasses('text', 'dashboard')} font-medium`}>
              {scanTypes[scanType].label}
            </span>
            <span className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm`}>
              Durée estimée: {scanTypes[scanType].duration}
            </span>
          </div>
          <p className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm mt-1`}>
            {scanTypes[scanType].description}
          </p>
        </div>
      )}
      
      {isScanning && (
        <div className="mb-4">
          <div className="flex items-center justify-between mb-2">
            <span className={`${getThemeClasses('text', 'dashboard')} text-sm`}>
              Progression du scan
            </span>
            <span className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm`}>
              {Math.round(scanProgress)}%
            </span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${scanProgress}%` }}
            ></div>
          </div>
        </div>
      )}
    </div>
  );

  // Composant de filtres et recherche
  const FiltersAndSearch = () => (
    <div className="flex flex-wrap items-center gap-4 mb-6">
      <div className="relative flex-1 min-w-64">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
        <input
          type="text"
          placeholder="Rechercher par titre, CVE, description..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full pl-10 pr-4 py-2 bg-gray-800 border border-gray-600 rounded focus:border-blue-500 focus:outline-none"
        />
      </div>
      
      <select
        value={filterSeverity}
        onChange={(e) => setFilterSeverity(e.target.value)}
        className="px-3 py-2 bg-gray-800 border border-gray-600 rounded focus:border-blue-500 focus:outline-none"
      >
        <option value="all">Toutes les sévérités</option>
        {Object.entries(severityLevels).map(([key, level]) => (
          <option key={key} value={key}>{level.label}</option>
        ))}
      </select>
      
      <select
        value={filterStatus}
        onChange={(e) => setFilterStatus(e.target.value)}
        className="px-3 py-2 bg-gray-800 border border-gray-600 rounded focus:border-blue-500 focus:outline-none"
      >
        <option value="all">Tous les statuts</option>
        <option value="open">Ouvert</option>
        <option value="patched">Corrigé</option>
        <option value="mitigated">Atténué</option>
      </select>
      
      <select
        value={sortBy}
        onChange={(e) => setSortBy(e.target.value)}
        className="px-3 py-2 bg-gray-800 border border-gray-600 rounded focus:border-blue-500 focus:outline-none"
      >
        <option value="severity">Sévérité</option>
        <option value="cvss">Score CVSS</option>
        <option value="discovered">Date de découverte</option>
        <option value="title">Titre</option>
      </select>
    </div>
  );

  // Composant de tableau des vulnérabilités
  const VulnerabilityTable = () => (
    <div className={`${getThemeClasses('card', 'dashboard')} overflow-hidden`}>
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gray-800/50">
            <tr>
              <th className="text-left py-3 px-4 text-gray-300 font-medium text-sm">CVE/ID</th>
              <th className="text-left py-3 px-4 text-gray-300 font-medium text-sm">Titre</th>
              <th className="text-left py-3 px-4 text-gray-300 font-medium text-sm">Sévérité</th>
              <th className="text-left py-3 px-4 text-gray-300 font-medium text-sm">CVSS</th>
              <th className="text-left py-3 px-4 text-gray-300 font-medium text-sm">Statut</th>
              <th className="text-left py-3 px-4 text-gray-300 font-medium text-sm">Hôtes</th>
              <th className="text-left py-3 px-4 text-gray-300 font-medium text-sm">Actions</th>
            </tr>
          </thead>
          <tbody>
            {sortedVulnerabilities.map(vuln => {
              const severityConfig = severityLevels[vuln.severity];
              
              return (
                <tr key={vuln.id} className="border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                  <td className={`py-3 px-4 ${getThemeClasses('text', 'dashboard')} font-mono text-sm`}>
                    {vuln.id}
                  </td>
                  <td className={`py-3 px-4 ${getThemeClasses('text', 'dashboard')} font-medium max-w-xs`}>
                    <div className="truncate">{vuln.title}</div>
                  </td>
                  <td className="py-3 px-4">
                    <span className={`px-2 py-1 text-xs rounded ${severityConfig.bgColor} ${severityConfig.color}`}>
                      {severityConfig.label}
                    </span>
                  </td>
                  <td className={`py-3 px-4 ${getThemeClasses('text', 'dashboard')} font-semibold`}>
                    {vuln.cvss}
                  </td>
                  <td className="py-3 px-4">
                    <span className={`px-2 py-1 text-xs rounded ${
                      vuln.status === 'open' ? 'bg-red-900/30 text-red-400' :
                      vuln.status === 'patched' ? 'bg-green-900/30 text-green-400' :
                      'bg-yellow-900/30 text-yellow-400'
                    }`}>
                      {vuln.status === 'open' ? 'Ouvert' : 
                       vuln.status === 'patched' ? 'Corrigé' : 'Atténué'}
                    </span>
                  </td>
                  <td className={`py-3 px-4 ${getThemeClasses('textSecondary', 'dashboard')} text-sm`}>
                    {vuln.hostCount}
                  </td>
                  <td className="py-3 px-4">
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => {
                          setSelectedVulnerability(vuln);
                          setIsModalOpen(true);
                        }}
                        className="p-1.5 rounded hover:bg-gray-700 transition-colors"
                        title="Voir détails"
                      >
                        <Eye className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );

  // Modal de détails de vulnérabilité
  const VulnerabilityModal = () => {
    if (!selectedVulnerability || !isModalOpen) return null;
    
    const severityConfig = severityLevels[selectedVulnerability.severity];
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
        <div className="bg-gray-800 rounded-lg shadow-2xl border border-gray-700 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between p-6 border-b border-gray-700">
            <div className="flex items-center space-x-4">
              <h2 className={`${getThemeClasses('text', 'dashboard')} text-xl font-semibold`}>
                {selectedVulnerability.title}
              </h2>
              <span className={`px-2 py-1 text-xs rounded ${severityConfig.bgColor} ${severityConfig.color}`}>
                {severityConfig.label}
              </span>
              <span className="px-2 py-1 text-xs rounded bg-gray-700 text-gray-300">
                CVSS: {selectedVulnerability.cvss}
              </span>
            </div>
            <button
              onClick={() => setIsModalOpen(false)}
              className="p-2 hover:bg-gray-700 rounded transition-colors"
            >
              <XCircle className="w-5 h-5" />
            </button>
          </div>
          
          <div className="p-6 space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className={`${getThemeClasses('text', 'dashboard')} text-lg font-medium mb-3`}>
                  Informations
                </h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className={`${getThemeClasses('textSecondary', 'dashboard')}`}>ID:</span>
                    <span className={`${getThemeClasses('text', 'dashboard')} font-mono`}>
                      {selectedVulnerability.id}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`${getThemeClasses('textSecondary', 'dashboard')}`}>Catégorie:</span>
                    <span className={`${getThemeClasses('text', 'dashboard')}`}>
                      {selectedVulnerability.category}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`${getThemeClasses('textSecondary', 'dashboard')}`}>Exploitabilité:</span>
                    <span className={`${getThemeClasses('text', 'dashboard')}`}>
                      {selectedVulnerability.exploitability}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`${getThemeClasses('textSecondary', 'dashboard')}`}>Impact:</span>
                    <span className={`${getThemeClasses('text', 'dashboard')}`}>
                      {selectedVulnerability.impact}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`${getThemeClasses('textSecondary', 'dashboard')}`}>Hôtes affectés:</span>
                    <span className={`${getThemeClasses('text', 'dashboard')}`}>
                      {selectedVulnerability.hostCount}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className={`${getThemeClasses('textSecondary', 'dashboard')}`}>Découvert:</span>
                    <span className={`${getThemeClasses('text', 'dashboard')}`}>
                      {new Date(selectedVulnerability.discovered).toLocaleString()}
                    </span>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className={`${getThemeClasses('text', 'dashboard')} text-lg font-medium mb-3`}>
                  Systèmes affectés
                </h3>
                <div className="space-y-2">
                  {selectedVulnerability.affected.map((system, index) => (
                    <div key={index} className="flex items-center space-x-2 p-2 bg-gray-700/50 rounded">
                      <Server className="w-4 h-4 text-blue-400" />
                      <span className={`${getThemeClasses('text', 'dashboard')} text-sm`}>
                        {system}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            <div>
              <h3 className={`${getThemeClasses('text', 'dashboard')} text-lg font-medium mb-3`}>
                Description
              </h3>
              <p className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm leading-relaxed`}>
                {selectedVulnerability.description}
              </p>
            </div>
            
            <div>
              <h3 className={`${getThemeClasses('text', 'dashboard')} text-lg font-medium mb-3`}>
                Solution recommandée
              </h3>
              <p className={`${getThemeClasses('textSecondary', 'dashboard')} text-sm leading-relaxed`}>
                {selectedVulnerability.solution}
              </p>
            </div>
            
            <div>
              <h3 className={`${getThemeClasses('text', 'dashboard')} text-lg font-medium mb-3`}>
                Références
              </h3>
              <div className="space-y-2">
                {selectedVulnerability.references.map((ref, index) => (
                  <div key={index} className="flex items-center space-x-2">
                    <FileText className="w-4 h-4 text-blue-400" />
                    <span className={`${getThemeClasses('text', 'dashboard')} text-sm font-mono`}>
                      {ref}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Composant des graphiques
  const VulnerabilityCharts = () => (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
      <div className={`${getThemeClasses('card', 'dashboard')} p-4`}>
        <h3 className={`${getThemeClasses('text', 'dashboard')} text-lg font-semibold mb-4`}>
          Répartition par sévérité
        </h3>
        <div className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <RechartsPieChart>
              <Pie
                data={severityChartData}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {severityChartData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
            </RechartsPieChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div className={`${getThemeClasses('card', 'dashboard')} p-4`}>
        <h3 className={`${getThemeClasses('text', 'dashboard')} text-lg font-semibold mb-4`}>
          Tendance des vulnérabilités
        </h3>
        <div className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <RechartsLineChart data={trendData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="date" stroke="#9CA3AF" fontSize={12} />
              <YAxis stroke="#9CA3AF" fontSize={12} />
              <Tooltip 
                contentStyle={{
                  backgroundColor: '#1F2937',
                  border: '1px solid #374151',
                  borderRadius: '4px',
                  color: '#fff'
                }}
              />
              <Line type="monotone" dataKey="vulnerabilities" stroke="#3B82F6" strokeWidth={2} />
              <Line type="monotone" dataKey="critical" stroke="#EF4444" strokeWidth={2} />
              <Line type="monotone" dataKey="high" stroke="#F97316" strokeWidth={2} />
            </RechartsLineChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );

  if (!isVisible) return null;

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className={`${getThemeClasses('text', 'dashboard')} text-2xl font-bold`}>
            Analyse des Vulnérabilités
          </h2>
          <p className={`${getThemeClasses('textSecondary', 'dashboard')} mt-1`}>
            Scan et évaluation des vulnérabilités de sécurité
          </p>
        </div>
        
        <div className="flex items-center space-x-2">
          <button className="flex items-center space-x-2 px-3 py-2 border border-gray-600 hover:border-gray-500 rounded transition-colors">
            <Download className="w-4 h-4" />
            <span>Rapport</span>
          </button>
          <button className="flex items-center space-x-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors">
            <Settings className="w-4 h-4" />
            <span>Configurer</span>
          </button>
        </div>
      </div>

      <VulnerabilityMetrics />
      <ScanControls />
      <VulnerabilityCharts />
      <FiltersAndSearch />
      <VulnerabilityTable />
      <VulnerabilityModal />
    </div>
  );
};

export default VulnerabilityAnalysis;