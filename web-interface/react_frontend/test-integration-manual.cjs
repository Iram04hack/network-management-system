/**
 * Script de test d'int√©gration manuel avec Node.js
 * Teste la connectivit√© entre frontend et backend
 */

const https = require('https');
const http = require('http');

// Configuration
const BACKEND_URL = 'https://localhost:8000';  // HTTPS d√©tect√©
const FRONTEND_URL = 'http://localhost:5173';

// R√©sultats de test
const testResults = {
  backend_running: false,
  frontend_running: false,
  endpoints: {},
  errors: []
};

// Helper pour faire des requ√™tes HTTP
function makeRequest(url, options = {}) {
  const urlObj = new URL(url);
  const client = urlObj.protocol === 'https:' ? https : http;
  
  return new Promise((resolve, reject) => {
    const req = client.request(url, {
      method: options.method || 'GET',
      headers: options.headers || {},
      timeout: 5000,
      rejectUnauthorized: false  // Accepter les certificats auto-sign√©s
    }, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });

    req.on('error', reject);
    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (options.body) {
      req.write(options.body);
    }
    req.end();
  });
}

// Test de connectivit√© de base
async function testConnectivity() {
  console.log('üöÄ D√©marrage des tests d\'int√©gration manuel\n');

  // Test Backend Django
  console.log('üì° Test Backend Django...');
  try {
    const response = await makeRequest(`${BACKEND_URL}/admin/login/`);
    testResults.backend_running = [200, 301, 302].includes(response.status);
    console.log(`‚úÖ Backend Django: Status ${response.status} - ${testResults.backend_running ? 'OK' : 'ERREUR'}`);
  } catch (error) {
    console.log(`‚ùå Backend Django: ${error.message}`);
    testResults.errors.push(`Backend: ${error.message}`);
  }

  // Test Frontend React
  console.log('üì° Test Frontend React...');
  try {
    const response = await makeRequest(`${FRONTEND_URL}/`);
    testResults.frontend_running = [200, 301, 302].includes(response.status);
    console.log(`‚úÖ Frontend React: Status ${response.status} - ${testResults.frontend_running ? 'OK' : 'ERREUR'}`);
  } catch (error) {
    console.log(`‚ùå Frontend React: ${error.message}`);
    testResults.errors.push(`Frontend: ${error.message}`);
  }
}

// Test des endpoints API
async function testAPIEndpoints() {
  if (!testResults.backend_running) {
    console.log('\n‚è≠Ô∏è Tests API ignor√©s - Backend non accessible');
    return;
  }

  console.log('\nüì° Test des endpoints API...');

  const endpoints = [
    '/api/clients/',
    '/api/views/dashboard/',
    '/api/dashboard/config/',
    '/api/gns3_integration/api/servers/',
    '/swagger/',
    '/api/schema/'
  ];

  for (const endpoint of endpoints) {
    try {
      const response = await makeRequest(`${BACKEND_URL}${endpoint}`);
      testResults.endpoints[endpoint] = response.status;
      
      const status = [200, 401, 403].includes(response.status) ? '‚úÖ' : 
                    [404].includes(response.status) ? '‚ö†Ô∏è' : '‚ùå';
      
      console.log(`${status} ${endpoint}: Status ${response.status}`);
    } catch (error) {
      testResults.endpoints[endpoint] = 'error';
      console.log(`‚ùå ${endpoint}: ${error.message}`);
      testResults.errors.push(`${endpoint}: ${error.message}`);
    }
  }
}

// Test de la documentation Swagger
async function testSwagger() {
  if (!testResults.backend_running) {
    console.log('\n‚è≠Ô∏è Test Swagger ignor√© - Backend non accessible');
    return;
  }

  console.log('\nüìñ Test Swagger Documentation...');

  try {
    const response = await makeRequest(`${BACKEND_URL}/swagger/`);
    const swaggerOk = [200, 301, 302].includes(response.status);
    console.log(`${swaggerOk ? '‚úÖ' : '‚ùå'} Swagger UI: Status ${response.status}`);

    // Test des schemas OpenAPI
    try {
      const schemaResponse = await makeRequest(`${BACKEND_URL}/api/schema/`);
      const schemaOk = [200].includes(schemaResponse.status);
      console.log(`${schemaOk ? '‚úÖ' : '‚ùå'} Schema OpenAPI: Status ${schemaResponse.status}`);
      
      if (schemaOk && schemaResponse.data) {
        try {
          const schema = JSON.parse(schemaResponse.data);
          console.log(`üìã Schema OpenAPI: ${Object.keys(schema.paths || {}).length} endpoints document√©s`);
        } catch (e) {
          console.log('‚ö†Ô∏è Schema OpenAPI non parsable');
        }
      }
    } catch (error) {
      console.log(`‚ùå Schema OpenAPI: ${error.message}`);
    }

  } catch (error) {
    console.log(`‚ùå Swagger UI: ${error.message}`);
  }
}

// Test des services sp√©cifiques
async function testSpecificServices() {
  if (!testResults.backend_running) {
    console.log('\n‚è≠Ô∏è Tests services ignor√©s - Backend non accessible');
    return;
  }

  console.log('\nüîß Test des services sp√©cifiques...');

  // Test service health check si disponible
  try {
    const response = await makeRequest(`${BACKEND_URL}/health/`);
    console.log(`‚úÖ Health Check: Status ${response.status}`);
  } catch (error) {
    console.log(`‚ö†Ô∏è Health Check non disponible: ${error.message}`);
  }

  // Test authentification
  try {
    const response = await makeRequest(`${BACKEND_URL}/api/auth/user/`);
    console.log(`üì± Auth endpoint: Status ${response.status}`);
  } catch (error) {
    console.log(`‚ö†Ô∏è Auth endpoint: ${error.message}`);
  }
}

// G√©n√©ration du rapport final
function generateReport() {
  console.log('\n' + '='.repeat(60));
  console.log('üìä RAPPORT D\'INT√âGRATION FINAL');
  console.log('='.repeat(60));

  // Statut des services
  console.log('\nüèóÔ∏è SERVICES:');
  console.log(`Backend Django:  ${testResults.backend_running ? '‚úÖ RUNNING' : '‚ùå DOWN'}`);
  console.log(`Frontend React:  ${testResults.frontend_running ? '‚úÖ RUNNING' : '‚ùå DOWN'}`);

  // Statut des endpoints
  console.log('\nüì° ENDPOINTS API:');
  const workingEndpoints = Object.entries(testResults.endpoints)
    .filter(([_, status]) => [200, 401, 403].includes(status));
  const totalEndpoints = Object.keys(testResults.endpoints).length;
  
  Object.entries(testResults.endpoints).forEach(([endpoint, status]) => {
    const icon = [200, 401, 403].includes(status) ? '‚úÖ' : 
                 status === 404 ? '‚ö†Ô∏è' : '‚ùå';
    console.log(`${icon} ${endpoint}: ${status}`);
  });

  // Calcul du score
  let score = 0;
  let maxScore = 0;

  if (testResults.backend_running) score += 40;
  if (testResults.frontend_running) score += 20;
  maxScore += 60;

  score += workingEndpoints.length * 5;
  maxScore += totalEndpoints * 5;

  const percentage = maxScore > 0 ? (score / maxScore) * 100 : 0;

  console.log('\nüìà SCORE D\'INT√âGRATION:');
  console.log(`Score: ${score}/${maxScore} (${percentage.toFixed(1)}%)`);
  console.log(`Endpoints fonctionnels: ${workingEndpoints.length}/${totalEndpoints}`);

  // Erreurs
  if (testResults.errors.length > 0) {
    console.log('\n‚ùå ERREURS D√âTECT√âES:');
    testResults.errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error}`);
    });
  }

  // Recommandations
  console.log('\nüí° RECOMMANDATIONS:');
  if (!testResults.backend_running) {
    console.log('- V√©rifier que Django est d√©marr√© sur le port 8000');
    console.log('- V√©rifier la configuration Docker du backend');
  }
  if (!testResults.frontend_running) {
    console.log('- V√©rifier que React est d√©marr√© sur le port 5173');
    console.log('- V√©rifier la configuration Vite du frontend');
  }
  if (workingEndpoints.length < totalEndpoints / 2) {
    console.log('- V√©rifier la configuration des URLs Django');
    console.log('- V√©rifier les permissions et l\'authentification');
  }

  // Statut global
  console.log('\nüéØ STATUT GLOBAL:');
  if (percentage >= 80) {
    console.log('‚úÖ INT√âGRATION EXCELLENTE - Syst√®me pr√™t pour la production');
  } else if (percentage >= 60) {
    console.log('‚ö†Ô∏è INT√âGRATION CORRECTE - Quelques ajustements n√©cessaires');
  } else if (percentage >= 40) {
    console.log('üîß INT√âGRATION PARTIELLE - Corrections importantes requises');
  } else {
    console.log('‚ùå INT√âGRATION D√âFAILLANTE - R√©solution des probl√®mes critiques requise');
  }

  console.log('\n' + '='.repeat(60));

  return percentage >= 50; // Retourne true si l'int√©gration est acceptable
}

// Fonction principale
async function main() {
  try {
    await testConnectivity();
    await testAPIEndpoints();
    await testSwagger();
    await testSpecificServices();
    
    const success = generateReport();
    process.exit(success ? 0 : 1);

  } catch (error) {
    console.error('‚ùå Erreur fatale lors des tests:', error);
    process.exit(1);
  }
}

// Ex√©cution
if (require.main === module) {
  main();
}

module.exports = {
  testConnectivity,
  testAPIEndpoints,
  testSwagger,
  generateReport
};