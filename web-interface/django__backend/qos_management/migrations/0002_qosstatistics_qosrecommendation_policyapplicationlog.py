# Generated by Django 4.2.23 on 2025-07-12 22:39

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ("qos_management", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="QoSStatistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("interface_name", models.CharField(max_length=255)),
                ("device_id", models.IntegerField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("bytes_sent", models.BigIntegerField(default=0)),
                ("packets_sent", models.BigIntegerField(default=0)),
                ("bytes_dropped", models.BigIntegerField(default=0)),
                ("packets_dropped", models.BigIntegerField(default=0)),
                ("overlimits", models.BigIntegerField(default=0)),
                ("requeues", models.BigIntegerField(default=0)),
                ("utilization_percentage", models.FloatField(default=0.0)),
                (
                    "congestion_level",
                    models.CharField(
                        choices=[
                            ("normal", "Normal"),
                            ("low", "Faible"),
                            ("medium", "Moyen"),
                            ("high", "Élevé"),
                            ("critical", "Critique"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                ("raw_tc_output", models.TextField(blank=True, null=True)),
                ("additional_metrics", models.JSONField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Statistique QoS",
                "verbose_name_plural": "Statistiques QoS",
                "ordering": ["-timestamp", "interface_name"],
                "indexes": [
                    models.Index(
                        fields=["interface_name", "timestamp"],
                        name="qos_managem_interfa_67f450_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="qos_managem_timesta_414a4c_idx"
                    ),
                    models.Index(
                        fields=["congestion_level"],
                        name="qos_managem_congest_779558_idx",
                    ),
                    models.Index(
                        fields=["device_id", "timestamp"],
                        name="qos_managem_device__f73300_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="QoSRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "interface_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("device_id", models.IntegerField(blank=True, null=True)),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("bandwidth_optimization", "Optimisation bande passante"),
                            ("priority_adjustment", "Ajustement priorités"),
                            ("traffic_shaping", "Traffic shaping"),
                            ("voip_optimization", "Optimisation VoIP"),
                            ("video_optimization", "Optimisation vidéo"),
                            (
                                "business_data_optimization",
                                "Optimisation données métier",
                            ),
                            ("general_optimization", "Optimisation générale"),
                            ("compliance_fix", "Correction conformité"),
                            ("congestion_mitigation", "Atténuation congestion"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("critical", "Critique"),
                            ("high", "Élevée"),
                            ("medium", "Moyenne"),
                            ("low", "Faible"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("recommended_action", models.CharField(max_length=100)),
                (
                    "expected_improvement",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("recommended_configuration", models.JSONField(blank=True, null=True)),
                (
                    "generated_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "generated_by_engine",
                    models.CharField(default="qos_ai_engine", max_length=100),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.5,
                        help_text="Score de confiance de la recommandation (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("analysis_data", models.JSONField(blank=True, null=True)),
                ("traffic_patterns", models.JSONField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("applied", "Appliquée"),
                            ("rejected", "Rejetée"),
                            ("expired", "Expirée"),
                            ("superseded", "Remplacée"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("applied_at", models.DateTimeField(blank=True, null=True)),
                ("applied_by", models.CharField(blank=True, max_length=255, null=True)),
                ("rejection_reason", models.TextField(blank=True, null=True)),
                (
                    "effectiveness_score",
                    models.FloatField(
                        blank=True,
                        help_text="Score d'efficacité après application (0-1)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "policy",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to="qos_management.qospolicy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recommandation QoS",
                "verbose_name_plural": "Recommandations QoS",
                "ordering": ["-generated_at", "-priority", "interface_name"],
                "indexes": [
                    models.Index(
                        fields=["status", "priority"],
                        name="qos_managem_status_9e2780_idx",
                    ),
                    models.Index(
                        fields=["device_id", "generated_at"],
                        name="qos_managem_device__4c54e1_idx",
                    ),
                    models.Index(
                        fields=["interface_name", "generated_at"],
                        name="qos_managem_interfa_f63de3_idx",
                    ),
                    models.Index(
                        fields=["recommendation_type", "priority"],
                        name="qos_managem_recomme_399a33_idx",
                    ),
                    models.Index(
                        fields=["generated_at"], name="qos_managem_generat_22bdf1_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PolicyApplicationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("interface_name", models.CharField(max_length=255)),
                ("device_id", models.IntegerField(blank=True, null=True)),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("applied", "Politique appliquée"),
                            ("modified", "Politique modifiée"),
                            ("removed", "Politique supprimée"),
                            ("optimized", "Politique optimisée"),
                            ("failed", "Application échouée"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "trigger_source",
                    models.CharField(
                        choices=[
                            ("manual", "Manuel"),
                            ("automatic", "Automatique"),
                            ("congestion_detected", "Congestion détectée"),
                            ("compliance_violation", "Violation conformité"),
                            ("recommendation_engine", "Moteur de recommandations"),
                            ("scheduled_optimization", "Optimisation planifiée"),
                        ],
                        default="manual",
                        max_length=50,
                    ),
                ),
                ("applied_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("applied_by", models.CharField(blank=True, max_length=255, null=True)),
                ("success", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("applied_configuration", models.JSONField(blank=True, null=True)),
                ("previous_configuration", models.JSONField(blank=True, null=True)),
                ("performance_before", models.JSONField(blank=True, null=True)),
                ("performance_after", models.JSONField(blank=True, null=True)),
                ("execution_time_ms", models.IntegerField(default=0)),
                (
                    "celery_task_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("additional_metadata", models.JSONField(blank=True, null=True)),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="application_logs",
                        to="qos_management.qospolicy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Log d'application de politique QoS",
                "verbose_name_plural": "Logs d'application de politiques QoS",
                "ordering": ["-applied_at", "interface_name"],
                "indexes": [
                    models.Index(
                        fields=["interface_name", "applied_at"],
                        name="qos_managem_interfa_36e2b2_idx",
                    ),
                    models.Index(
                        fields=["policy", "applied_at"],
                        name="qos_managem_policy__062e4f_idx",
                    ),
                    models.Index(
                        fields=["trigger_source", "applied_at"],
                        name="qos_managem_trigger_aa83f0_idx",
                    ),
                    models.Index(
                        fields=["success", "applied_at"],
                        name="qos_managem_success_afdd18_idx",
                    ),
                    models.Index(
                        fields=["device_id", "applied_at"],
                        name="qos_managem_device__f860b2_idx",
                    ),
                ],
            },
        ),
    ]
