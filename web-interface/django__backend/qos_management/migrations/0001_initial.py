# Generated by Django 4.2.23 on 2025-06-28 14:23

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="QoSPolicy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("policy_type", models.CharField(max_length=50)),
                ("priority", models.IntegerField(default=0)),
                ("bandwidth_limit", models.PositiveIntegerField(blank=True, null=True)),
                ("status", models.CharField(default="inactive", max_length=20)),
                ("configuration", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Politique QoS",
                "verbose_name_plural": "Politiques QoS",
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="TrafficClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("priority", models.IntegerField(default=0)),
                (
                    "dscp",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(63),
                        ],
                    ),
                ),
                ("bandwidth", models.PositiveIntegerField(default=0)),
                (
                    "bandwidth_percent",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("queue_limit", models.PositiveIntegerField(default=64)),
                ("parameters", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="traffic_classes",
                        to="qos_management.qospolicy",
                    ),
                ),
            ],
            options={
                "ordering": ["policy", "priority"],
                "unique_together": {("policy", "name")},
            },
        ),
        migrations.CreateModel(
            name="TrafficClassifier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("protocol", models.CharField(blank=True, max_length=50, null=True)),
                ("source_ip", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "destination_ip",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "source_port_start",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                    ),
                ),
                (
                    "source_port_end",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                    ),
                ),
                (
                    "destination_port_start",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                    ),
                ),
                (
                    "destination_port_end",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                    ),
                ),
                (
                    "dscp",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(63),
                        ],
                    ),
                ),
                (
                    "vlan_id",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4095),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "traffic_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classifiers",
                        to="qos_management.trafficclass",
                    ),
                ),
            ],
            options={
                "ordering": ["traffic_class", "protocol"],
            },
        ),
        migrations.CreateModel(
            name="SLAComplianceRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_id", models.IntegerField()),
                (
                    "device_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "period",
                    models.CharField(
                        help_text="Période de l'évaluation (ex: '24h', '7d')",
                        max_length=10,
                    ),
                ),
                (
                    "overall_compliance",
                    models.FloatField(
                        help_text="Taux de conformité global (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "service_class_compliances",
                    models.JSONField(
                        blank=True,
                        help_text="Taux de conformité par classe de service",
                        null=True,
                    ),
                ),
                (
                    "metrics",
                    models.JSONField(
                        blank=True,
                        help_text="Métriques détaillées (latence, jitter, perte de paquets, etc.)",
                        null=True,
                    ),
                ),
                (
                    "issues",
                    models.JSONField(
                        blank=True, help_text="Problèmes détectés", null=True
                    ),
                ),
                (
                    "recommendations",
                    models.JSONField(
                        blank=True,
                        help_text="Recommandations pour améliorer la conformité",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Enregistrement de conformité SLA",
                "verbose_name_plural": "Enregistrements de conformité SLA",
                "ordering": ["-timestamp", "device_id"],
                "indexes": [
                    models.Index(
                        fields=["device_id", "timestamp"],
                        name="qos_managem_device__02d8cd_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="qos_managem_timesta_d27b21_idx"
                    ),
                    models.Index(
                        fields=["overall_compliance"],
                        name="qos_managem_overall_ae5ae4_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="InterfaceQoSPolicy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("device_id", models.IntegerField()),
                ("interface_id", models.IntegerField()),
                ("interface_name", models.CharField(max_length=255)),
                (
                    "direction",
                    models.CharField(
                        choices=[("ingress", "Entrée"), ("egress", "Sortie")],
                        max_length=10,
                    ),
                ),
                ("parameters", models.JSONField(blank=True, null=True)),
                ("applied_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="interface_associations",
                        to="qos_management.qospolicy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Association Interface-Politique QoS",
                "verbose_name_plural": "Associations Interface-Politique QoS",
                "unique_together": {("interface_id", "direction")},
            },
        ),
    ]
