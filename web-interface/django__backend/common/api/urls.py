"""
URLs pour l'API Service Central GNS3.

Ce module configure toutes les routes pour l'API REST du service central GNS3,
avec documentation Swagger automatique et versioning.
"""

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework import permissions

from .gns3_central_viewsets import GNS3CentralViewSet, GNS3EventViewSet

# Configuration du sch√©ma Swagger/OpenAPI
schema_view = get_schema_view(
    openapi.Info(
        title="Service Central GNS3 API",
        default_version='v1',
        description="""
# API Service Central GNS3

Cette API fournit une interface REST compl√®te pour interagir avec le service central GNS3 
du syst√®me de gestion r√©seau.

## Fonctionnalit√©s principales

### üéõÔ∏è Gestion des N≈ìuds
- **D√©marrage/Arr√™t/Red√©marrage** de n≈ìuds individuels
- **Contr√¥le en masse** de plusieurs n≈ìuds
- **Surveillance du statut** en temps r√©el via cache Redis
- **Actions batch** pour optimiser les performances

### üèóÔ∏è Gestion des Projets  
- **D√©marrage complet** de tous les n≈ìuds d'un projet
- **Surveillance des projets** et de leur √©tat
- **Op√©rations en parall√®le** pour les performances

### üó∫Ô∏è Topologie R√©seau
- **Vue globale** de la topologie avec cache Redis
- **Rafra√Æchissement forc√©** depuis le serveur GNS3
- **Filtrage avanc√©** par statut, type, projet
- **Donn√©es temps r√©el** avec mise √† jour automatique

### üì° Syst√®me d'√âv√©nements
- **√âv√©nements temps r√©el** via WebSocket et syst√®me de messages
- **Abonnements cibl√©s** par type d'√©v√©nement
- **Diffusion automatique** vers tous les modules abonn√©s
- **Historique et statistiques** d'√©v√©nements

### üîß Interface Modules
- **Interface simplifi√©e** pour les modules externes
- **Abstraction compl√®te** de la complexit√© GNS3
- **Cache transparent** et gestion d'erreurs automatique
- **Abonnements aux √©v√©nements** plug-and-play

## Architecture

Le service central GNS3 utilise une architecture √©v√©nementielle avec :

- **Cache Redis** pour les performances et la coh√©rence
- **Communication inter-modules** via message bus
- **Circuit breaker** pour la r√©silience
- **WebSocket** pour les √©v√©nements temps r√©el (√† venir)
- **Monitoring complet** avec m√©triques et statistiques

## Authentification

Toutes les APIs n√©cessitent une authentification Django standard.
Utilisez votre token d'authentification dans l'en-t√™te Authorization.

## Types d'√©v√©nements GNS3

| Type | Description |
|------|-------------|
| `node.started` | N≈ìud d√©marr√© |
| `node.stopped` | N≈ìud arr√™t√© |  
| `node.suspended` | N≈ìud suspendu |
| `node.created` | Nouveau n≈ìud cr√©√© |
| `node.deleted` | N≈ìud supprim√© |
| `project.opened` | Projet ouvert |
| `project.closed` | Projet ferm√© |
| `topology.changed` | Changement de topologie |
| `link.created` | Nouveau lien cr√©√© |
| `link.deleted` | Lien supprim√© |

## Codes de retour

- **200** : Succ√®s
- **201** : Ressource cr√©√©e
- **400** : Param√®tres invalides
- **401** : Non authentifi√©
- **404** : Ressource non trouv√©e
- **500** : Erreur serveur

## Exemples d'utilisation

### D√©marrer un n≈ìud
```bash
curl -X POST "http://localhost:8000/api/gns3-central/start_node/" \\
     -H "Authorization: Bearer YOUR_TOKEN" \\
     -d "project_id=12345&node_id=67890"
```

### Obtenir la topologie
```bash
curl -X GET "http://localhost:8000/api/gns3-central/topology/" \\
     -H "Authorization: Bearer YOUR_TOKEN"
```

### Cr√©er une interface module
```bash
curl -X POST "http://localhost:8000/api/gns3-central/create_module_interface/" \\
     -H "Authorization: Bearer YOUR_TOKEN" \\
     -H "Content-Type: application/json" \\
     -d '{"module_name": "monitoring"}'
```

## Support

Pour plus d'informations, consultez la documentation technique du projet ou 
contactez l'√©quipe de d√©veloppement.
        """,
        terms_of_service="https://www.example.com/policies/terms/",
        contact=openapi.Contact(email="admin@networkmanagement.local"),
        license=openapi.License(name="MIT License"),
    ),
    public=True,
    permission_classes=[permissions.AllowAny],
    patterns=[
        path('api/common/', include('common.api.urls')),
    ],
)

# Router pour les ViewSets
router = DefaultRouter()
router.register(r'gns3-central', GNS3CentralViewSet, basename='gns3-central')
router.register(r'gns3-events', GNS3EventViewSet, basename='gns3-events')

# URLs principales
urlpatterns = [
    # API ViewSets avec router DRF
    path('api/', include(router.urls)),
    
    # Documentation Swagger
    path('api/docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('api/redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    path('api/schema/', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    
    # Endpoints explicites pour le Service Central GNS3
    path('api/gns3-central/status/', 
         GNS3CentralViewSet.as_view({'get': 'status'}), 
         name='gns3-central-status'),
    path('api/gns3-central/start_node/', 
         GNS3CentralViewSet.as_view({'post': 'start_node'}), 
         name='gns3-central-start-node'),
    path('api/gns3-central/stop_node/', 
         GNS3CentralViewSet.as_view({'post': 'stop_node'}), 
         name='gns3-central-stop-node'),
    path('api/gns3-central/restart_node/', 
         GNS3CentralViewSet.as_view({'post': 'restart_node'}), 
         name='gns3-central-restart-node'),
    path('api/gns3-central/start_project/', 
         GNS3CentralViewSet.as_view({'post': 'start_project'}), 
         name='gns3-central-start-project'),
    path('api/gns3-central/topology/', 
         GNS3CentralViewSet.as_view({'get': 'topology'}), 
         name='gns3-central-topology'),
    path('api/gns3-central/refresh_topology/', 
         GNS3CentralViewSet.as_view({'post': 'refresh_topology'}), 
         name='gns3-central-refresh-topology'),
    path('api/gns3-central/node_status/', 
         GNS3CentralViewSet.as_view({'get': 'node_status'}), 
         name='gns3-central-node-status'),
    path('api/gns3-central/create_module_interface/', 
         GNS3CentralViewSet.as_view({'post': 'create_module_interface'}), 
         name='gns3-central-create-module-interface'),
    
    # Endpoints pour les √©v√©nements GNS3
    path('api/gns3-events/stats/', 
         GNS3EventViewSet.as_view({'get': 'stats'}), 
         name='gns3-events-stats'),
    
    # Endpoints de compatibilit√© (quick-access)
    path('api/gns3-central/quick-status/', 
         GNS3CentralViewSet.as_view({'get': 'status'}), 
         name='gns3-quick-status'),
    path('api/gns3-central/quick-topology/', 
         GNS3CentralViewSet.as_view({'get': 'topology'}), 
         name='gns3-quick-topology'),
    path('api/gns3-events/quick-stats/', 
         GNS3EventViewSet.as_view({'get': 'stats'}), 
         name='gns3-quick-events-stats'),
]

# URLs suppl√©mentaires pour l'int√©gration avec les modules existants
api_patterns = [
    # Compatibilit√© avec l'existant
    path('gns3/', include([
        path('status/', GNS3CentralViewSet.as_view({'get': 'status'}), name='gns3-legacy-status'),
        path('nodes/start/', GNS3CentralViewSet.as_view({'post': 'start_node'}), name='gns3-legacy-start-node'),
        path('nodes/stop/', GNS3CentralViewSet.as_view({'post': 'stop_node'}), name='gns3-legacy-stop-node'),
        path('topology/', GNS3CentralViewSet.as_view({'get': 'topology'}), name='gns3-legacy-topology'),
    ])),
    
    # Routes pour l'interface modules
    path('modules/', include([
        path('create-interface/', 
             GNS3CentralViewSet.as_view({'post': 'create_module_interface'}), 
             name='gns3-create-module-interface'),
    ])),
    
    # Routes pour les √©v√©nements  
    path('events/', include([
        path('stats/', GNS3EventViewSet.as_view({'get': 'stats'}), name='gns3-events-stats'),
    ])),
]

# Ajouter les patterns API aux URLs principales
urlpatterns.extend([path('api/', include(api_patterns))])

# URLs pour les webhooks (futur d√©veloppement)
webhook_patterns = [
    # Webhooks pour les int√©grations externes
    # path('webhook/gns3-events/', webhook_gns3_events_view, name='webhook-gns3-events'),
    # path('webhook/topology-change/', webhook_topology_change_view, name='webhook-topology-change'),
]

# M√©tadonn√©es pour l'API
app_name = 'common_service'

# Configuration des patterns URL pour diff√©rents environnements
import os
if os.environ.get('DJANGO_DEBUG', 'False').lower() == 'true':
    # En mode debug, ajouter des endpoints de test
    from rest_framework.decorators import api_view
    from rest_framework.response import Response
    
    @api_view(['GET'])
    def api_health_check(request):
        """Endpoint de contr√¥le de sant√© pour les tests."""
        from ..infrastructure.gns3_central_service import gns3_central_service
        
        try:
            status = gns3_central_service.get_service_status()
            return Response({
                'api_healthy': True,
                'service_status': status['status'],
                'gns3_connected': status.get('gns3_server', {}).get('connected', False),
                'cache_available': status.get('cache', {}).get('network_state_cached', False)
            })
        except Exception as e:
            return Response({
                'api_healthy': False,
                'error': str(e)
            }, status=500)
    
    # Ajouter l'endpoint de health check en mode debug
    urlpatterns.append(path('api/health/', api_health_check, name='api-health-check'))

# Documentation des endpoints pour les d√©veloppeurs
"""
## R√©sum√© des endpoints disponibles

### Service Central GNS3 (/api/gns3-central/)
- GET /status/                    - √âtat du service central
- POST /start_node/              - D√©marrer un n≈ìud  
- POST /stop_node/               - Arr√™ter un n≈ìud
- POST /restart_node/            - Red√©marrer un n≈ìud
- POST /start_project/           - D√©marrer un projet complet
- GET /topology/                 - Topologie compl√®te du r√©seau
- POST /refresh_topology/        - Rafra√Æchir la topologie
- GET /node_status/              - Statut d'un n≈ìud sp√©cifique
- POST /create_module_interface/ - Cr√©er une interface pour un module

### √âv√©nements GNS3 (/api/gns3-events/)  
- GET /stats/                    - Statistiques des √©v√©nements

### Documentation
- /api/docs/                     - Interface Swagger interactive
- /api/redoc/                    - Documentation ReDoc
- /api/schema/                   - Sch√©ma OpenAPI JSON

### Compatibilit√© legacy
- /api/gns3/status/              - Ancien endpoint de statut
- /api/gns3/nodes/start/         - Ancien endpoint de d√©marrage de n≈ìud
- /api/gns3/topology/            - Ancien endpoint de topologie

### Debug (d√©veloppement seulement)
- /api/health/                   - Contr√¥le de sant√© de l'API
"""