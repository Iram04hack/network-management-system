"""
üîß CORRECTIF COMPLET : Service de d√©couverte d'√©quipements avec r√©cup√©ration d'IPs am√©lior√©e.

Ce fichier contient les corrections sp√©cifiques pour r√©soudre le probl√®me d'injection de trafic 
qui trouve 0 cible au lieu de 17 √©quipements.
"""

import asyncio
import logging
import re
import subprocess
import telnetlib
import socket
import time
from typing import Dict, List, Any, Optional
from django.utils import timezone

from api_clients.network.gns3_client import GNS3Client
from api_clients.network.snmp_client import SNMPClient, SNMPCredentials, SNMPVersion

logger = logging.getLogger(__name__)

class EnhancedEquipmentDiscoveryService:
    """Service am√©lior√© de d√©couverte d'√©quipements avec r√©cup√©ration d'IPs robuste."""
    
    def __init__(self):
        self.gns3_client = GNS3Client()
        
    async def discover_equipment_with_real_ips(self, project_id: str, node_id: str) -> Dict[str, Any]:
        """
        üîß CORRECTION PRINCIPALE : D√©couverte d'√©quipement avec r√©cup√©ration d'IPs r√©elle.
        
        Cette m√©thode impl√©mente plusieurs strat√©gies pour r√©cup√©rer les vraies adresses IP
        des √©quipements GNS3, corrigeant le probl√®me de 0 cible trouv√©e.
        """
        equipment_data = {
            'equipment_id': node_id,
            'project_id': project_id,
            'discovery_timestamp': timezone.now().isoformat(),
            'discovery_status': 'in_progress',
            'ip_discovery_methods': [],
            'ip_discovery_results': {}
        }
        
        try:
            # 1. Informations de base GNS3
            basic_info = await self._get_gns3_basic_info(project_id, node_id)
            equipment_data.update(basic_info)
            
            # 2. üîß CORRECTION : R√©cup√©ration d'IPs via toutes les m√©thodes disponibles
            discovered_ips = await self._comprehensive_ip_discovery(project_id, node_id, equipment_data)
            
            # 3. Validation et test des IPs trouv√©es
            validated_ips = await self._validate_and_test_ips(discovered_ips, equipment_data)
            
            # 4. Mise √† jour des informations r√©seau
            equipment_data['network_info'] = {
                'ip_addresses': validated_ips,
                'discovery_methods_used': equipment_data['ip_discovery_methods'],
                'discovery_results': equipment_data['ip_discovery_results'],
                'connectivity_tests': {},
                'interfaces': await self._get_enhanced_interfaces(project_id, node_id, validated_ips)
            }
            
            # 5. Tests de connectivit√© pour chaque IP valid√©e
            for ip in validated_ips:
                connectivity = await self._enhanced_connectivity_test(ip, equipment_data)
                equipment_data['network_info']['connectivity_tests'][ip] = connectivity
                
            # 6. Tentative de r√©cup√©ration d'informations SNMP
            if validated_ips:
                snmp_data = await self._enhanced_snmp_discovery(validated_ips, equipment_data)
                equipment_data['snmp_data'] = snmp_data
            
            equipment_data['discovery_status'] = 'completed'
            equipment_data['discovery_completion_time'] = timezone.now().isoformat()
            
            # Log des r√©sultats
            logger.info(f"üéØ D√©couverte termin√©e pour {equipment_data.get('name', 'Unknown')} - IPs trouv√©es: {len(validated_ips)}")
            if validated_ips:
                logger.info(f"‚úÖ IPs valid√©es: {validated_ips}")
            else:
                logger.warning(f"‚ö†Ô∏è Aucune IP trouv√©e pour {equipment_data.get('name', 'Unknown')}")
                
        except Exception as e:
            equipment_data['discovery_status'] = 'failed'
            equipment_data['error'] = str(e)
            logger.error(f"‚ùå Erreur d√©couverte √©quipement {node_id}: {e}")
            
        return equipment_data
    
    async def _comprehensive_ip_discovery(self, project_id: str, node_id: str, equipment_data: Dict[str, Any]) -> List[str]:
        """
        üîß CORRECTION PRINCIPALE : D√©couverte d'IPs via toutes les strat√©gies disponibles.
        """
        all_discovered_ips = []
        methods_used = []
        results = {}
        
        node_name = equipment_data.get('name', 'Unknown')
        node_type = equipment_data.get('node_type', 'unknown')
        node_status = equipment_data.get('status', 'stopped')
        
        logger.info(f"üîç D√©couverte d'IPs pour {node_name} (type: {node_type}, statut: {node_status})")
        
        # 1. Strat√©gie : R√©cup√©ration via les configurations statiques
        try:
            config_ips = await self._get_ips_from_configurations(equipment_data)
            if config_ips:
                all_discovered_ips.extend(config_ips)
                methods_used.append('configuration_files')
                results['configuration_files'] = {'ips': config_ips, 'success': True}
                logger.info(f"‚úÖ IPs trouv√©es via configurations: {config_ips}")
            else:
                results['configuration_files'] = {'ips': [], 'success': False, 'reason': 'No configuration files or IPs found'}
        except Exception as e:
            results['configuration_files'] = {'ips': [], 'success': False, 'error': str(e)}
            logger.warning(f"‚ö†Ô∏è Erreur r√©cup√©ration IPs via configurations: {e}")
        
        # 2. Strat√©gie : Console Telnet/VNC (si √©quipement d√©marr√©)
        if node_status == 'started':
            try:
                console_ips = await self._get_ips_via_console_enhanced(project_id, node_id, equipment_data)
                if console_ips:
                    all_discovered_ips.extend(console_ips)
                    methods_used.append('console_access')
                    results['console_access'] = {'ips': console_ips, 'success': True}
                    logger.info(f"‚úÖ IPs trouv√©es via console: {console_ips}")
                else:
                    results['console_access'] = {'ips': [], 'success': False, 'reason': 'No console access or IPs found'}
            except Exception as e:
                results['console_access'] = {'ips': [], 'success': False, 'error': str(e)}
                logger.warning(f"‚ö†Ô∏è Erreur r√©cup√©ration IPs via console: {e}")
        else:
            # Si l'√©quipement n'est pas d√©marr√©, essayer de le d√©marrer
            try:
                start_result = self.gns3_client.start_node(project_id, node_id)
                if start_result.get('success', True):
                    logger.info(f"üöÄ D√©marrage du n≈ìud {node_name} pour d√©couverte IP")
                    await asyncio.sleep(5)  # Attendre que l'√©quipement d√©marre
                    
                    # R√©essayer la console apr√®s d√©marrage
                    console_ips = await self._get_ips_via_console_enhanced(project_id, node_id, equipment_data)
                    if console_ips:
                        all_discovered_ips.extend(console_ips)
                        methods_used.append('console_access_after_start')
                        results['console_access_after_start'] = {'ips': console_ips, 'success': True}
                        logger.info(f"‚úÖ IPs trouv√©es via console apr√®s d√©marrage: {console_ips}")
                    else:
                        results['console_access_after_start'] = {'ips': [], 'success': False, 'reason': 'No IPs found after starting node'}
                else:
                    results['console_access_after_start'] = {'ips': [], 'success': False, 'reason': 'Failed to start node'}
            except Exception as e:
                results['console_access_after_start'] = {'ips': [], 'success': False, 'error': str(e)}
                logger.warning(f"‚ö†Ô∏è Erreur d√©marrage/console: {e}")
        
        # 3. Strat√©gie : Scan r√©seau intelligent bas√© sur la topologie
        try:
            topology_ips = await self._smart_topology_scan(project_id, node_id, equipment_data)
            if topology_ips:
                all_discovered_ips.extend(topology_ips)
                methods_used.append('topology_scan')
                results['topology_scan'] = {'ips': topology_ips, 'success': True}
                logger.info(f"‚úÖ IPs trouv√©es via scan topologie: {topology_ips}")
            else:
                results['topology_scan'] = {'ips': [], 'success': False, 'reason': 'No IPs found in topology scan'}
        except Exception as e:
            results['topology_scan'] = {'ips': [], 'success': False, 'error': str(e)}
            logger.warning(f"‚ö†Ô∏è Erreur scan topologie: {e}")
        
        # 4. Strat√©gie : D√©duction d'IPs par nom et type d'√©quipement
        try:
            deduced_ips = await self._deduce_ips_from_naming(node_name, node_type, equipment_data)
            if deduced_ips:
                all_discovered_ips.extend(deduced_ips)
                methods_used.append('naming_deduction')
                results['naming_deduction'] = {'ips': deduced_ips, 'success': True}
                logger.info(f"‚úÖ IPs d√©duites par nom: {deduced_ips}")
            else:
                results['naming_deduction'] = {'ips': [], 'success': False, 'reason': 'No IPs deduced from naming'}
        except Exception as e:
            results['naming_deduction'] = {'ips': [], 'success': False, 'error': str(e)}
            logger.warning(f"‚ö†Ô∏è Erreur d√©duction par nom: {e}")
        
        # 5. Strat√©gie : Scan des r√©seaux communs
        try:
            common_network_ips = await self._scan_common_networks(node_name, equipment_data)
            if common_network_ips:
                all_discovered_ips.extend(common_network_ips)
                methods_used.append('common_network_scan')
                results['common_network_scan'] = {'ips': common_network_ips, 'success': True}
                logger.info(f"‚úÖ IPs trouv√©es via scan r√©seaux communs: {common_network_ips}")
            else:
                results['common_network_scan'] = {'ips': [], 'success': False, 'reason': 'No IPs found in common networks'}
        except Exception as e:
            results['common_network_scan'] = {'ips': [], 'success': False, 'error': str(e)}
            logger.warning(f"‚ö†Ô∏è Erreur scan r√©seaux communs: {e}")
        
        # Mise √† jour des r√©sultats dans equipment_data
        equipment_data['ip_discovery_methods'] = methods_used
        equipment_data['ip_discovery_results'] = results
        
        # √âliminer les doublons
        unique_ips = list(set(all_discovered_ips))
        
        logger.info(f"üéØ D√©couverte termin√©e pour {node_name}: {len(unique_ips)} IPs uniques trouv√©es")
        if unique_ips:
            logger.info(f"üìã IPs d√©couvertes: {unique_ips}")
        
        return unique_ips
    
    async def _get_ips_from_configurations(self, equipment_data: Dict[str, Any]) -> List[str]:
        """R√©cup√®re les IPs depuis les fichiers de configuration."""
        ips = []
        properties = equipment_data.get('properties', {})
        node_type = equipment_data.get('node_type', 'unknown')
        
        # VPCS - Script de d√©marrage
        if node_type == 'vpcs' and 'startup_script' in properties:
            startup_script = properties['startup_script']
            if startup_script:
                patterns = [
                    r'ip (\d+\.\d+\.\d+\.\d+)',
                    r'set pcname ip (\d+\.\d+\.\d+\.\d+)',
                    r'(\d+\.\d+\.\d+\.\d+)/\d+',
                    r'address (\d+\.\d+\.\d+\.\d+)'
                ]
                
                for pattern in patterns:
                    matches = re.findall(pattern, startup_script)
                    ips.extend(matches)
        
        # Dynamips (Cisco IOS) - Fichiers de configuration
        elif node_type == 'dynamips':
            config_files = [
                properties.get('startup_config'),
                properties.get('private_config')
            ]
            
            for config_file in config_files:
                if config_file:
                    try:
                        with open(config_file, 'r', encoding='utf-8', errors='ignore') as f:
                            config_content = f.read()
                            
                        patterns = [
                            r'ip address (\d+\.\d+\.\d+\.\d+) \d+\.\d+\.\d+\.\d+',
                            r'ip (\d+\.\d+\.\d+\.\d+) \d+\.\d+\.\d+\.\d+',
                            r'interface.*?ip address (\d+\.\d+\.\d+\.\d+)',
                            r'loopback.*?ip address (\d+\.\d+\.\d+\.\d+)'
                        ]
                        
                        for pattern in patterns:
                            matches = re.findall(pattern, config_content, re.MULTILINE | re.DOTALL)
                            ips.extend(matches)
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erreur lecture config {config_file}: {e}")
        
        # QEMU - Param√®tres kernel
        elif node_type == 'qemu':
            kernel_cmd = properties.get('kernel_command_line', '')
            if kernel_cmd:
                patterns = [
                    r'ip=(\d+\.\d+\.\d+\.\d+)',
                    r'ipaddr=(\d+\.\d+\.\d+\.\d+)',
                    r'host_ip=(\d+\.\d+\.\d+\.\d+)'
                ]
                
                for pattern in patterns:
                    matches = re.findall(pattern, kernel_cmd)
                    ips.extend(matches)
        
        # IOU - Configurations similaires √† Dynamips
        elif node_type == 'iou':
            # Pour IOU, les configurations peuvent √™tre dans des fichiers similaires
            # Essayer de d√©duire depuis les propri√©t√©s
            application_id = properties.get('application_id', 0)
            if application_id:
                # D√©duire une IP bas√©e sur l'application_id
                base_ip = f"192.168.{application_id}.1"
                ips.append(base_ip)
        
        return ips
    
    async def _get_ips_via_console_enhanced(self, project_id: str, node_id: str, equipment_data: Dict[str, Any]) -> List[str]:
        """R√©cup√©ration d'IPs via console avec support am√©lior√©."""
        console_ips = []
        
        try:
            # R√©cup√©rer les informations de console
            node_data = self.gns3_client.get_node(project_id, node_id)
            console_port = node_data.get('console')
            console_type = node_data.get('console_type', 'telnet')
            console_host = node_data.get('console_host', 'localhost')
            
            if not console_port:
                logger.warning(f"‚ö†Ô∏è Pas de port console disponible pour {equipment_data.get('name', 'Unknown')}")
                return console_ips
            
            if console_type == 'telnet':
                console_ips = await self._telnet_ip_discovery(console_host, console_port, equipment_data)
            elif console_type == 'vnc':
                logger.info(f"üñ•Ô∏è Console VNC d√©tect√©e pour {equipment_data.get('name', 'Unknown')} - pas d'extraction d'IP automatique")
            else:
                logger.warning(f"‚ö†Ô∏è Type de console non support√©: {console_type}")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration IPs via console: {e}")
            
        return console_ips
    
    async def _telnet_ip_discovery(self, host: str, port: int, equipment_data: Dict[str, Any]) -> List[str]:
        """R√©cup√©ration d'IPs via connexion Telnet √† la console."""
        ips = []
        node_type = equipment_data.get('node_type', 'unknown')
        node_name = equipment_data.get('name', 'Unknown')
        
        try:
            logger.info(f"üîó Connexion Telnet √† {host}:{port} pour {node_name}")
            
            with telnetlib.Telnet(host, port, timeout=10) as tn:
                # Attendre un peu pour que la connexion s'√©tablisse
                time.sleep(2)
                
                # Commandes selon le type d'√©quipement
                if node_type == 'vpcs':
                    # Commandes VPCS
                    tn.write(b"\n")
                    time.sleep(1)
                    tn.write(b"show ip\n")
                    time.sleep(2)
                    output = tn.read_very_eager().decode('utf-8', errors='ignore')
                    
                    # Patterns pour VPCS
                    patterns = [
                        r'IP\s+(\d+\.\d+\.\d+\.\d+)',
                        r'ip\s+(\d+\.\d+\.\d+\.\d+)',
                        r'(\d+\.\d+\.\d+\.\d+)/\d+'
                    ]
                    
                elif node_type in ['dynamips', 'iou']:
                    # Commandes Cisco IOS
                    tn.write(b"\n")
                    time.sleep(1)
                    tn.write(b"enable\n")
                    time.sleep(1)
                    tn.write(b"show ip interface brief\n")
                    time.sleep(3)
                    output = tn.read_very_eager().decode('utf-8', errors='ignore')
                    
                    # Patterns pour Cisco IOS
                    patterns = [
                        r'(\d+\.\d+\.\d+\.\d+)\s+YES',
                        r'(\d+\.\d+\.\d+\.\d+)\s+manual',
                        r'(\d+\.\d+\.\d+\.\d+)\s+unset'
                    ]
                    
                elif node_type == 'qemu':
                    # Commandes Linux g√©n√©riques
                    tn.write(b"\n")
                    time.sleep(1)
                    tn.write(b"ip addr show\n")
                    time.sleep(2)
                    tn.write(b"ifconfig\n")
                    time.sleep(2)
                    output = tn.read_very_eager().decode('utf-8', errors='ignore')
                    
                    # Patterns pour Linux
                    patterns = [
                        r'inet (\d+\.\d+\.\d+\.\d+)',
                        r'inet addr:(\d+\.\d+\.\d+\.\d+)'
                    ]
                    
                else:
                    # Commandes g√©n√©riques
                    tn.write(b"\n")
                    time.sleep(1)
                    tn.write(b"?\n")
                    time.sleep(1)
                    output = tn.read_very_eager().decode('utf-8', errors='ignore')
                    patterns = [r'(\d+\.\d+\.\d+\.\d+)']
                
                # Extraction des IPs
                for pattern in patterns:
                    matches = re.findall(pattern, output)
                    ips.extend(matches)
                
                # Filtrer les IPs invalides
                valid_ips = []
                for ip in ips:
                    if not ip.startswith('127.') and not ip.startswith('0.') and ip != '0.0.0.0':
                        valid_ips.append(ip)
                
                logger.info(f"üì§ Sortie console pour {node_name}: {output[:200]}...")
                logger.info(f"üéØ IPs extraites: {valid_ips}")
                
                return valid_ips
                
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion Telnet {host}:{port}: {e}")
            return []
    
    async def _smart_topology_scan(self, project_id: str, node_id: str, equipment_data: Dict[str, Any]) -> List[str]:
        """Scan intelligent bas√© sur la topologie du r√©seau."""
        topology_ips = []
        
        try:
            # R√©cup√©rer les liens du projet
            links = self.gns3_client.list_links(project_id)
            
            # Identifier les r√©seaux connect√©s
            connected_networks = set()
            
            for link in links:
                nodes = link.get('nodes', [])
                node_in_link = any(node.get('node_id') == node_id for node in nodes)
                
                if node_in_link:
                    # Analyser les n≈ìuds voisins pour d√©duire les r√©seaux
                    for node in nodes:
                        if node.get('node_id') != node_id:
                            neighbor_data = self.gns3_client.get_node(project_id, node.get('node_id'))
                            neighbor_name = neighbor_data.get('name', '').lower()
                            
                            # D√©duire le r√©seau selon le nom du voisin
                            if 'dmz' in neighbor_name:
                                connected_networks.add('192.168.10.0/24')
                            elif 'lan' in neighbor_name:
                                connected_networks.add('192.168.1.0/24')
                            elif 'wan' in neighbor_name:
                                connected_networks.add('192.168.100.0/24')
                            elif 'server' in neighbor_name:
                                connected_networks.add('192.168.50.0/24')
                            elif 'router' in neighbor_name:
                                connected_networks.add('192.168.0.0/24')
            
            # Ajouter des r√©seaux par d√©faut si aucun d√©tect√©
            if not connected_networks:
                connected_networks = {
                    '192.168.1.0/24', '192.168.10.0/24', '192.168.100.0/24',
                    '10.0.0.0/24', '172.16.0.0/24'
                }
            
            # Scanner les r√©seaux identifi√©s
            for network in connected_networks:
                base_ip = network.split('/')[0].rsplit('.', 1)[0]
                node_name = equipment_data.get('name', '').lower()
                
                # IPs probables selon le type d'√©quipement
                if 'router' in node_name:
                    test_ips = [f"{base_ip}.1", f"{base_ip}.254"]
                elif 'switch' in node_name:
                    test_ips = [f"{base_ip}.2", f"{base_ip}.3"]
                elif 'server' in node_name:
                    test_ips = [f"{base_ip}.10", f"{base_ip}.20", f"{base_ip}.100"]
                elif 'pc' in node_name or 'vpcs' in node_name:
                    test_ips = [f"{base_ip}.50", f"{base_ip}.100", f"{base_ip}.150"]
                else:
                    test_ips = [f"{base_ip}.1", f"{base_ip}.10", f"{base_ip}.100"]
                
                # Tester chaque IP
                for test_ip in test_ips:
                    if await self._quick_ping_test(test_ip):
                        topology_ips.append(test_ip)
                        logger.info(f"üéØ IP trouv√©e via topologie: {test_ip}")
                        
        except Exception as e:
            logger.error(f"‚ùå Erreur scan topologie: {e}")
            
        return topology_ips
    
    async def _deduce_ips_from_naming(self, node_name: str, node_type: str, equipment_data: Dict[str, Any]) -> List[str]:
        """D√©duction d'IPs bas√©e sur les conventions de nommage."""
        deduced_ips = []
        
        try:
            name_lower = node_name.lower()
            
            # D√©duction par nom
            if 'router' in name_lower:
                if 'r1' in name_lower:
                    deduced_ips.extend(['192.168.1.1', '10.0.0.1'])
                elif 'r2' in name_lower:
                    deduced_ips.extend(['192.168.2.1', '10.0.0.2'])
                elif 'main' in name_lower:
                    deduced_ips.extend(['192.168.0.1', '10.0.0.1'])
                    
            elif 'switch' in name_lower:
                if 'dmz' in name_lower:
                    deduced_ips.extend(['192.168.10.2', '192.168.10.3'])
                elif 'lan' in name_lower:
                    deduced_ips.extend(['192.168.1.2', '192.168.1.3'])
                elif 'wan' in name_lower:
                    deduced_ips.extend(['192.168.100.2', '192.168.100.3'])
                    
            elif 'server' in name_lower:
                if 'mail' in name_lower:
                    deduced_ips.extend(['192.168.10.10', '192.168.1.10'])
                elif 'dns' in name_lower:
                    deduced_ips.extend(['192.168.10.11', '192.168.1.11'])
                elif 'web' in name_lower:
                    deduced_ips.extend(['192.168.10.80', '192.168.1.80'])
                elif 'db' in name_lower:
                    deduced_ips.extend(['192.168.10.100', '192.168.1.100'])
                    
            elif 'pc' in name_lower or node_type == 'vpcs':
                # Extraire le num√©ro du PC s'il existe
                import re
                pc_match = re.search(r'pc(\d+)', name_lower)
                if pc_match:
                    pc_num = int(pc_match.group(1))
                    deduced_ips.extend([
                        f'192.168.1.{100 + pc_num}',
                        f'192.168.10.{100 + pc_num}'
                    ])
                else:
                    deduced_ips.extend(['192.168.1.100', '192.168.10.100'])
            
            # D√©duction par ID d'application (IOU)
            properties = equipment_data.get('properties', {})
            app_id = properties.get('application_id')
            if app_id and isinstance(app_id, int):
                deduced_ips.extend([
                    f'192.168.{app_id}.1',
                    f'192.168.{app_id}.2',
                    f'10.0.{app_id}.1'
                ])
                
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©duction IPs par nom: {e}")
            
        return deduced_ips
    
    async def _scan_common_networks(self, node_name: str, equipment_data: Dict[str, Any]) -> List[str]:
        """Scan des r√©seaux communs pour trouver l'√©quipement."""
        common_ips = []
        
        # R√©seaux communs √† scanner
        common_networks = [
            '192.168.1.0/24',
            '192.168.10.0/24',
            '192.168.100.0/24',
            '10.0.0.0/24',
            '172.16.0.0/24'
        ]
        
        try:
            for network in common_networks:
                base_ip = network.split('/')[0].rsplit('.', 1)[0]
                
                # IPs communes √† tester
                common_hosts = [1, 2, 3, 10, 11, 20, 50, 100, 150, 200, 254]
                
                for host in common_hosts:
                    test_ip = f"{base_ip}.{host}"
                    
                    if await self._quick_ping_test(test_ip):
                        # V√©rifier si cette IP appartient probablement √† cet √©quipement
                        if await self._verify_ip_ownership(test_ip, equipment_data):
                            common_ips.append(test_ip)
                            logger.info(f"üéØ IP trouv√©e via scan commun: {test_ip}")
                            
        except Exception as e:
            logger.error(f"‚ùå Erreur scan r√©seaux communs: {e}")
            
        return common_ips
    
    async def _quick_ping_test(self, ip: str) -> bool:
        """Test de ping rapide."""
        try:
            result = subprocess.run(
                ['ping', '-c', '1', '-W', '1', ip],
                capture_output=True,
                text=True,
                timeout=3
            )
            return result.returncode == 0
        except Exception:
            return False
    
    async def _verify_ip_ownership(self, ip: str, equipment_data: Dict[str, Any]) -> bool:
        """V√©rifie si une IP appartient probablement √† cet √©quipement."""
        try:
            node_name = equipment_data.get('name', '').lower()
            node_type = equipment_data.get('node_type', 'unknown')
            
            # Test de connectivit√© avanc√©
            connectivity = await self._enhanced_connectivity_test(ip, equipment_data)
            
            if not connectivity.get('ping_success', False):
                return False
            
            # V√©rifier les ports ouverts selon le type d'√©quipement
            open_ports = connectivity.get('port_scan', {})
            
            if 'router' in node_name and (open_ports.get(22) or open_ports.get(23)):
                return True
            elif 'switch' in node_name and (open_ports.get(23) or open_ports.get(161)):
                return True
            elif 'server' in node_name and (open_ports.get(22) or open_ports.get(80) or open_ports.get(443)):
                return True
            elif node_type == 'vpcs' and connectivity.get('ping_success'):
                return True
            
            # Si √ßa r√©pond au ping, c'est probablement valide
            return True
            
        except Exception:
            return False
    
    async def _validate_and_test_ips(self, discovered_ips: List[str], equipment_data: Dict[str, Any]) -> List[str]:
        """Valide et teste toutes les IPs d√©couvertes."""
        validated_ips = []
        
        for ip in set(discovered_ips):  # √âliminer les doublons
            if await self._validate_ip_format(ip):
                if await self._quick_ping_test(ip):
                    validated_ips.append(ip)
                    logger.info(f"‚úÖ IP valid√©e: {ip}")
                else:
                    logger.warning(f"‚ö†Ô∏è IP non accessible: {ip}")
            else:
                logger.warning(f"‚ö†Ô∏è Format IP invalide: {ip}")
        
        return validated_ips
    
    async def _validate_ip_format(self, ip: str) -> bool:
        """Valide le format d'une adresse IP."""
        try:
            import ipaddress
            ipaddress.ip_address(ip)
            return not ip.startswith('127.') and not ip.startswith('0.') and ip != '0.0.0.0'
        except ValueError:
            return False
    
    async def _enhanced_connectivity_test(self, ip: str, equipment_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test de connectivit√© am√©lior√©."""
        connectivity = {
            'ip': ip,
            'ping_success': False,
            'response_time_ms': None,
            'port_scan': {},
            'services_detected': []
        }
        
        try:
            # Test ping
            result = subprocess.run(
                ['ping', '-c', '1', '-W', '2', ip],
                capture_output=True,
                text=True,
                timeout=5
            )
            
            if result.returncode == 0:
                connectivity['ping_success'] = True
                
                # Extraire le temps de r√©ponse
                output = result.stdout
                time_match = re.search(r'time=(\d+\.?\d*)', output)
                if time_match:
                    connectivity['response_time_ms'] = float(time_match.group(1))
            
            # Test des ports selon le type d'√©quipement
            node_type = equipment_data.get('node_type', 'unknown')
            node_name = equipment_data.get('name', '').lower()
            
            if 'router' in node_name or 'switch' in node_name:
                test_ports = [22, 23, 161, 80, 443]
            elif 'server' in node_name:
                test_ports = [22, 80, 443, 25, 53, 110, 143, 993, 995]
            elif node_type == 'vpcs':
                test_ports = [22, 80]
            else:
                test_ports = [22, 23, 80, 161, 443]
            
            for port in test_ports:
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(1)
                    result = sock.connect_ex((ip, port))
                    connectivity['port_scan'][port] = result == 0
                    
                    if result == 0:
                        # D√©tecter le service
                        if port == 22:
                            connectivity['services_detected'].append('SSH')
                        elif port == 23:
                            connectivity['services_detected'].append('Telnet')
                        elif port == 80:
                            connectivity['services_detected'].append('HTTP')
                        elif port == 443:
                            connectivity['services_detected'].append('HTTPS')
                        elif port == 161:
                            connectivity['services_detected'].append('SNMP')
                    
                    sock.close()
                except Exception:
                    connectivity['port_scan'][port] = False
            
        except Exception as e:
            connectivity['error'] = str(e)
        
        return connectivity
    
    async def _enhanced_snmp_discovery(self, validated_ips: List[str], equipment_data: Dict[str, Any]) -> Dict[str, Any]:
        """D√©couverte SNMP am√©lior√©e."""
        snmp_data = {
            'snmp_available': False,
            'community_tested': [],
            'system_info': {},
            'interfaces_snmp': [],
            'performance_counters': {},
            'vendor_specific': {}
        }
        
        # Communaut√©s SNMP √† tester
        communities = ['public', 'private', 'cisco', 'admin', 'monitor', 'snmp']
        
        for ip in validated_ips:
            for community in communities:
                try:
                    credentials = SNMPCredentials(version=SNMPVersion.V2C, community=community)
                    snmp_client = SNMPClient(ip, credentials=credentials)
                    
                    # Test syst√®me
                    system_info = snmp_client.get_system_info()
                    
                    if system_info.get('success'):
                        snmp_data['snmp_available'] = True
                        snmp_data['active_ip'] = ip
                        snmp_data['active_community'] = community
                        snmp_data['system_info'] = system_info
                        
                        # Informations suppl√©mentaires
                        interfaces_info = snmp_client.get_interfaces_info()
                        if interfaces_info.get('success'):
                            snmp_data['interfaces_snmp'] = interfaces_info.get('interfaces', [])
                        
                        performance_info = snmp_client.get_performance_metrics()
                        if performance_info.get('success'):
                            snmp_data['performance_counters'] = performance_info.get('metrics', {})
                        
                        logger.info(f"‚úÖ SNMP activ√© sur {ip} avec communaut√© '{community}'")
                        return snmp_data
                        
                except Exception as e:
                    snmp_data['community_tested'].append({
                        'ip': ip,
                        'community': community,
                        'error': str(e)
                    })
        
        return snmp_data
    
    async def _get_enhanced_interfaces(self, project_id: str, node_id: str, validated_ips: List[str]) -> List[Dict[str, Any]]:
        """R√©cup√®re les interfaces am√©lior√©es avec les IPs associ√©es."""
        interfaces = []
        
        try:
            # R√©cup√©rer les interfaces depuis GNS3
            gns3_interfaces = self.gns3_client.get_node_interfaces(project_id, node_id)
            
            # Associer les IPs aux interfaces
            for i, interface in enumerate(gns3_interfaces):
                enhanced_interface = interface.copy()
                
                # Associer une IP √† l'interface si disponible
                if i < len(validated_ips):
                    enhanced_interface['ip_addresses'] = [validated_ips[i]]
                elif validated_ips:
                    enhanced_interface['ip_addresses'] = [validated_ips[0]]  # Utiliser la premi√®re IP
                else:
                    enhanced_interface['ip_addresses'] = []
                
                interfaces.append(enhanced_interface)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration interfaces: {e}")
            
        return interfaces
    
    async def _get_gns3_basic_info(self, project_id: str, node_id: str) -> Dict[str, Any]:
        """R√©cup√®re les informations de base depuis GNS3."""
        try:
            node_data = self.gns3_client.get_node(project_id, node_id)
            project_data = self.gns3_client.get_project(project_id)
            
            return {
                'name': node_data.get('name', 'Unknown'),
                'node_type': node_data.get('node_type', 'unknown'),
                'status': node_data.get('status', 'unknown'),
                'compute_id': node_data.get('compute_id'),
                'x': node_data.get('x', 0),
                'y': node_data.get('y', 0),
                'z': node_data.get('z', 1),
                'width': node_data.get('width', 60),
                'height': node_data.get('height', 45),
                'symbol': node_data.get('symbol'),
                'label': node_data.get('label', {}),
                'properties': node_data.get('properties', {}),
                'project_info': {
                    'project_name': project_data.get('name', 'Unknown'),
                    'project_status': project_data.get('status', 'unknown'),
                    'auto_start': project_data.get('auto_start', False),
                    'auto_open': project_data.get('auto_open', False),
                    'auto_close': project_data.get('auto_close', True)
                },
                'command_line': node_data.get('command_line', ''),
                'environment': node_data.get('environment', ''),
                'ports': node_data.get('ports', []),
                'custom_adapters': node_data.get('custom_adapters', [])
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration info GNS3: {e}")
            return {'error': f'Erreur r√©cup√©ration GNS3: {str(e)}'}


# Instance globale du service am√©lior√©
enhanced_equipment_discovery_service = EnhancedEquipmentDiscoveryService()