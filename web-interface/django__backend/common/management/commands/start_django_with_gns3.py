"""
Commande Django pour d√©marrer le serveur Django avec le service central GNS3.

Cette commande combine le d√©marrage du serveur Django avec l'initialisation
du service central GNS3 pour un fonctionnement complet.
"""

import asyncio
import logging
import signal
import sys
import threading
import time
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.conf import settings
from django.core.wsgi import get_wsgi_application

from common.infrastructure.gns3_central_service import gns3_central_service
from common.infrastructure.realtime_event_system import realtime_event_manager
from common.infrastructure.ubuntu_notification_service import ubuntu_notification_service

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    """Commande pour d√©marrer Django avec le service central GNS3."""
    
    help = 'D√©marre le serveur Django avec le service central GNS3 int√©gr√©'
    
    def add_arguments(self, parser):
        """Ajoute les arguments de la commande."""
        parser.add_argument(
            '--port',
            type=int,
            default=8000,
            help='Port sur lequel d√©marrer le serveur Django (d√©faut: 8000)'
        )
        
        parser.add_argument(
            '--host',
            type=str,
            default='0.0.0.0',
            help='Adresse IP sur laquelle d√©marrer le serveur (d√©faut: 0.0.0.0)'
        )
        
        parser.add_argument(
            '--no-gns3',
            action='store_true',
            help='D√©sactive l\'initialisation du service GNS3'
        )
        
        parser.add_argument(
            '--no-events',
            action='store_true',
            help='D√©sactive le syst√®me d\'√©v√©nements temps r√©el'
        )
        
        parser.add_argument(
            '--debug',
            action='store_true',
            help='Active le mode debug avec logs d√©taill√©s'
        )
    
    def handle(self, *args, **options):
        """Point d'entr√©e principal de la commande."""
        self.port = options.get('port', 8000)
        self.host = options.get('host', '0.0.0.0')
        self.enable_gns3 = not options.get('no_gns3', False)
        self.enable_events = not options.get('no_events', False)
        self.debug_mode = options.get('debug', False)
        
        # Configuration du logging
        if self.debug_mode:
            logging.getLogger('common.infrastructure').setLevel(logging.DEBUG)
        
        self.stdout.write(
            self.style.SUCCESS(f'üöÄ D√©marrage du serveur Django + GNS3 sur {self.host}:{self.port}')
        )
        
        # Gestion des signaux pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        try:
            # Initialiser GNS3 en arri√®re-plan
            if self.enable_gns3:
                self._start_gns3_background()
            
            # D√©marrer le serveur Django
            self._start_django_server()
            
        except KeyboardInterrupt:
            self.stdout.write(
                self.style.WARNING('\n‚èπÔ∏è  Arr√™t du serveur demand√©')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur fatale: {e}')
            )
            sys.exit(1)
        finally:
            self._cleanup()
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre."""
        self.stdout.write(
            self.style.WARNING(f'\nüì° Signal {signum} re√ßu, arr√™t du serveur...')
        )
        raise KeyboardInterrupt()
    
    def _start_gns3_background(self):
        """D√©marre le service GNS3 en arri√®re-plan."""
        def gns3_worker():
            """Worker thread pour le service GNS3."""
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # Initialiser le service GNS3
                self.stdout.write('üîß Initialisation du service GNS3...')
                result = loop.run_until_complete(gns3_central_service.initialize())
                
                if result:
                    self.stdout.write(
                        self.style.SUCCESS('‚úÖ Service GNS3 initialis√©')
                    )
                    
                    # D√©marrer les √©v√©nements si activ√©s
                    if self.enable_events:
                        self.stdout.write('‚ö° D√©marrage des √©v√©nements temps r√©el...')
                        loop.run_until_complete(realtime_event_manager.start())
                        self.stdout.write(
                            self.style.SUCCESS('‚úÖ √âv√©nements temps r√©el d√©marr√©s')
                        )
                    
                    # Notification de d√©marrage
                    ubuntu_notification_service.send_notification(
                        title="üöÄ Service GNS3 + Django D√©marr√©",
                        message=f"Serveur accessible sur http://{self.host}:{self.port}",
                        urgency='low',
                        category='system.gns3'
                    )
                    
                    self.stdout.write(
                        self.style.SUCCESS(f'üåê Documentation Swagger: http://{self.host}:{self.port}/swagger/')
                    )
                    self.stdout.write(
                        self.style.SUCCESS(f'üìñ API Root: http://{self.host}:{self.port}/api/')
                    )
                    self.stdout.write(
                        self.style.SUCCESS(f'üîß Service Central GNS3: http://{self.host}:{self.port}/api/common/')
                    )
                    
                else:
                    self.stdout.write(
                        self.style.WARNING('‚ö†Ô∏è  Service GNS3 non disponible, serveur Django seul')
                    )
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå Erreur service GNS3: {e}')
                )
                logger.error(f"Erreur dans le worker GNS3: {e}")
        
        # D√©marrer le worker GNS3 en arri√®re-plan
        if self.enable_gns3:
            gns3_thread = threading.Thread(target=gns3_worker, daemon=True)
            gns3_thread.start()
            time.sleep(2)  # Laisser le temps au service de s'initialiser
    
    def _start_django_server(self):
        """D√©marre le serveur Django."""
        self.stdout.write(
            self.style.SUCCESS(f'üåê D√©marrage du serveur Django sur {self.host}:{self.port}')
        )
        
        # V√©rifier que les migrations sont appliqu√©es
        self.stdout.write('üîç V√©rification des migrations...')
        try:
            call_command('migrate', verbosity=0)
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Migrations √† jour')
            )
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  Probl√®me de migrations: {e}')
            )
        
        # Collecter les fichiers statiques si n√©cessaire
        if not settings.DEBUG:
            self.stdout.write('üìÅ Collecte des fichiers statiques...')
            try:
                call_command('collectstatic', verbosity=0, interactive=False)
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Fichiers statiques collect√©s')
                )
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è  Probl√®me fichiers statiques: {e}')
                )
        
        # Afficher les URLs importantes
        self.stdout.write('\n' + '='*60)
        self.stdout.write(
            self.style.SUCCESS('üéØ URLs Importantes:')
        )
        self.stdout.write(f'   üìñ Documentation Swagger: http://{self.host}:{self.port}/swagger/')
        self.stdout.write(f'   üìã API Root: http://{self.host}:{self.port}/api/')
        self.stdout.write(f'   üîß Service Central GNS3: http://{self.host}:{self.port}/api/common/')
        self.stdout.write(f'   ‚ö° GNS3 Central ViewSet: http://{self.host}:{self.port}/api/common/api/gns3-central/')
        self.stdout.write(f'   üìä √âv√©nements GNS3: http://{self.host}:{self.port}/api/common/api/gns3-events/')
        self.stdout.write(f'   üîó WebSocket GNS3: ws://{self.host}:{self.port}/ws/gns3/events/')
        self.stdout.write(f'   üéõÔ∏è  Interface Admin: http://{self.host}:{self.port}/admin/')
        self.stdout.write('='*60 + '\n')
        
        # D√©marrer le serveur Django
        try:
            call_command('runserver', f'{self.host}:{self.port}', verbosity=1)
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur serveur Django: {e}')
            )
            raise
    
    def _cleanup(self):
        """Nettoie les ressources avant l'arr√™t."""
        self.stdout.write('üßπ Nettoyage des ressources...')
        
        try:
            # Arr√™ter le gestionnaire d'√©v√©nements
            if self.enable_events:
                # Note: Dans un thread s√©par√©, difficile d'arr√™ter proprement
                # En production, utiliser un gestionnaire de processus appropri√©
                pass
            
            # Notification d'arr√™t
            ubuntu_notification_service.send_notification(
                title="üõë Serveur Django + GNS3 Arr√™t√©",
                message="Services arr√™t√©s proprement",
                urgency='low',
                category='system.gns3'
            )
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Nettoyage termin√©')
            )
            
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage: {e}")
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur lors du nettoyage: {e}')
            )
    
    def _display_startup_info(self):
        """Affiche les informations de d√©marrage."""
        self.stdout.write('\n' + '='*60)
        self.stdout.write(
            self.style.SUCCESS('üéâ Serveur Django + GNS3 Op√©rationnel!')
        )
        self.stdout.write('='*60)
        
        # Informations de configuration
        self.stdout.write('üìã Configuration:')
        self.stdout.write(f'   ‚Ä¢ Host: {self.host}')
        self.stdout.write(f'   ‚Ä¢ Port: {self.port}')
        self.stdout.write(f'   ‚Ä¢ Debug: {settings.DEBUG}')
        self.stdout.write(f'   ‚Ä¢ Service GNS3: {"‚úÖ Activ√©" if self.enable_gns3 else "‚ùå D√©sactiv√©"}')
        self.stdout.write(f'   ‚Ä¢ √âv√©nements: {"‚úÖ Activ√©" if self.enable_events else "‚ùå D√©sactiv√©"}')
        
        # Informations sur les services
        if self.enable_gns3:
            try:
                status = gns3_central_service.get_service_status()
                self.stdout.write(f'   ‚Ä¢ GNS3 Status: {status.get("status", "unknown")}')
                self.stdout.write(f'   ‚Ä¢ GNS3 Server: {status.get("gns3_server", {}).get("connected", False)}')
            except:
                self.stdout.write('   ‚Ä¢ GNS3 Status: Non disponible')
        
        self.stdout.write('\nüöÄ Serveur pr√™t pour les requ√™tes!')
        self.stdout.write('   (Appuyez sur Ctrl+C pour arr√™ter)\n')