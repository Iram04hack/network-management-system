"""
Commande Django pour d√©marrer le service central GNS3.

Cette commande initialise et d√©marre tous les composants du service central GNS3 :
- Service central GNS3
- Gestionnaire d'√©v√©nements temps r√©el
- Monitoring et cache Redis
- Syst√®me d'√©v√©nements WebSocket
"""

import asyncio
import logging
import signal
import sys
from django.core.management.base import BaseCommand
from django.conf import settings

from common.infrastructure.gns3_central_service import gns3_central_service
from common.infrastructure.realtime_event_system import realtime_event_manager
from common.infrastructure.ubuntu_notification_service import ubuntu_notification_service

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    """Commande pour d√©marrer le service central GNS3."""
    
    help = 'D√©marre le service central GNS3 avec tous ses composants'
    
    def add_arguments(self, parser):
        """Ajoute les arguments de la commande."""
        parser.add_argument(
            '--no-events',
            action='store_true',
            help='D√©sactive le syst√®me d\'√©v√©nements temps r√©el'
        )
        
        parser.add_argument(
            '--no-websocket',
            action='store_true',
            help='D√©sactive les WebSockets'
        )
        
        parser.add_argument(
            '--debug',
            action='store_true',
            help='Active le mode debug avec logs d√©taill√©s'
        )
        
        parser.add_argument(
            '--test-mode',
            action='store_true',
            help='Lance en mode test avec donn√©es simul√©es'
        )
    
    def handle(self, *args, **options):
        """Point d'entr√©e principal de la commande."""
        self.debug_mode = options.get('debug', False)
        self.test_mode = options.get('test_mode', False)
        self.enable_events = not options.get('no_events', False)
        self.enable_websocket = not options.get('no_websocket', False)
        
        # Configuration du logging
        if self.debug_mode:
            logging.getLogger('common.infrastructure').setLevel(logging.DEBUG)
        
        self.stdout.write(
            self.style.SUCCESS('üöÄ D√©marrage du Service Central GNS3')
        )
        
        # Gestion des signaux pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        # D√©marrer le service de mani√®re asynchrone
        try:
            asyncio.run(self._start_service())
        except KeyboardInterrupt:
            self.stdout.write(
                self.style.WARNING('\n‚èπÔ∏è  Arr√™t du service demand√©')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur fatale: {e}')
            )
            sys.exit(1)
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre."""
        self.stdout.write(
            self.style.WARNING(f'\nüì° Signal {signum} re√ßu, arr√™t du service...')
        )
        # Le KeyboardInterrupt sera captur√© par la boucle principale
        raise KeyboardInterrupt()
    
    async def _start_service(self):
        """D√©marre tous les composants du service de mani√®re asynchrone."""
        try:
            # 1. Initialisation du service central GNS3
            self.stdout.write('üîß Initialisation du service central GNS3...')
            
            if not await gns3_central_service.initialize():
                self.stdout.write(
                    self.style.ERROR('‚ùå √âchec de l\'initialisation du service central')
                )
                return
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Service central GNS3 initialis√©')
            )
            
            # 2. D√©marrage du gestionnaire d'√©v√©nements temps r√©el
            if self.enable_events:
                self.stdout.write('‚ö° D√©marrage du syst√®me d\'√©v√©nements temps r√©el...')
                await realtime_event_manager.start()
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Syst√®me d\'√©v√©nements d√©marr√©')
                )
            
            # 3. Configuration WebSocket
            if self.enable_websocket:
                self.stdout.write('üåê Configuration WebSocket...')
                self._configure_websocket()
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ WebSocket configur√©')
                )
            
            # 4. Tests de connectivit√©
            await self._run_connectivity_tests()
            
            # 5. Notification syst√®me de d√©marrage
            ubuntu_notification_service.send_notification(
                title="üöÄ Service Central GNS3 D√©marr√©",
                message="Tous les composants sont op√©rationnels",
                urgency='low',
                category='system.gns3'
            )
            
            # 6. Boucle principale de monitoring
            await self._main_service_loop()
            
        except Exception as e:
            logger.error(f"Erreur lors du d√©marrage du service: {e}")
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur: {e}')
            )
            raise
        finally:
            await self._cleanup_service()
    
    async def _run_connectivity_tests(self):
        """Ex√©cute les tests de connectivit√©."""
        self.stdout.write('üîç Tests de connectivit√©...')
        
        # Test GNS3
        service_status = gns3_central_service.get_service_status()
        gns3_connected = service_status.get('gns3_server', {}).get('connected', False)
        
        if gns3_connected:
            self.stdout.write('  ‚úÖ Serveur GNS3 accessible')
        else:
            self.stdout.write(
                self.style.WARNING('  ‚ö†Ô∏è  Serveur GNS3 non accessible')
            )
        
        # Test Cache Redis
        cache_available = service_status.get('cache', {}).get('network_state_cached', False)
        if cache_available:
            self.stdout.write('  ‚úÖ Cache Redis op√©rationnel')
        else:
            self.stdout.write('  ‚ÑπÔ∏è  Cache Redis vide (normal au d√©marrage)')
        
        # Test syst√®me d'√©v√©nements
        if self.enable_events:
            event_stats = realtime_event_manager.get_statistics()
            if event_stats.get('is_running'):
                self.stdout.write('  ‚úÖ Syst√®me d\'√©v√©nements actif')
            else:
                self.stdout.write(
                    self.style.WARNING('  ‚ö†Ô∏è  Syst√®me d\'√©v√©nements inactif')
                )
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ Tests de connectivit√© termin√©s')
        )
    
    def _configure_websocket(self):
        """Configure les WebSockets."""
        # V√©rifier la configuration ASGI
        asgi_application = getattr(settings, 'ASGI_APPLICATION', None)
        if not asgi_application:
            self.stdout.write(
                self.style.WARNING('  ‚ö†Ô∏è  ASGI_APPLICATION non configur√© dans settings')
            )
        
        # V√©rifier la configuration des channels
        channel_layers = getattr(settings, 'CHANNEL_LAYERS', None)
        if not channel_layers:
            self.stdout.write(
                self.style.WARNING('  ‚ö†Ô∏è  CHANNEL_LAYERS non configur√© dans settings')
            )
    
    async def _main_service_loop(self):
        """Boucle principale de monitoring du service."""
        self.stdout.write(
            self.style.SUCCESS('\nüéØ Service Central GNS3 op√©rationnel!')
        )
        self.stdout.write('üìä Monitoring en cours... (Ctrl+C pour arr√™ter)\n')
        
        loop_count = 0
        
        try:
            while True:
                # Monitoring p√©riodique toutes les 30 secondes
                await asyncio.sleep(30)
                loop_count += 1
                
                # Afficher les statistiques toutes les 2 minutes
                if loop_count % 4 == 0:
                    await self._display_statistics()
                
                # V√©rification de sant√© toutes les 5 minutes
                if loop_count % 10 == 0:
                    await self._health_check()
                
        except KeyboardInterrupt:
            self.stdout.write('\nüõë Arr√™t du service demand√©...')
    
    async def _display_statistics(self):
        """Affiche les statistiques du service."""
        if self.debug_mode:
            self.stdout.write('üìä Statistiques du service:')
            
            # Statistiques du service central
            service_status = gns3_central_service.get_service_status()
            stats = service_status.get('statistics', {})
            
            self.stdout.write(f'  ‚Ä¢ API calls: {stats.get("api_calls", 0)}')
            self.stdout.write(f'  ‚Ä¢ Cache hits: {stats.get("cache_hits", 0)}')
            self.stdout.write(f'  ‚Ä¢ Cache misses: {stats.get("cache_misses", 0)}')
            
            # Statistiques des √©v√©nements
            if self.enable_events:
                event_stats = realtime_event_manager.get_statistics()
                self.stdout.write(f'  ‚Ä¢ √âv√©nements publi√©s: {event_stats.get("events_published", 0)}')
                self.stdout.write(f'  ‚Ä¢ √âv√©nements livr√©s: {event_stats.get("events_delivered", 0)}')
                self.stdout.write(f'  ‚Ä¢ Connexions WebSocket: {event_stats.get("connections_active", 0)}')
            
            self.stdout.write('')
    
    async def _health_check(self):
        """V√©rifie la sant√© du service."""
        try:
            # V√©rifier le service central
            service_status = gns3_central_service.get_service_status()
            if service_status.get('status') != 'connected':
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è  Service central d√©connect√©, tentative de reconnexion...')
                )
                await gns3_central_service.initialize()
            
            # V√©rifier le gestionnaire d'√©v√©nements
            if self.enable_events:
                event_stats = realtime_event_manager.get_statistics()
                if not event_stats.get('is_running'):
                    self.stdout.write(
                        self.style.WARNING('‚ö†Ô∏è  Gestionnaire d\'√©v√©nements arr√™t√©, red√©marrage...')
                    )
                    await realtime_event_manager.start()
            
        except Exception as e:
            logger.error(f"Erreur lors du health check: {e}")
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur health check: {e}')
            )
    
    async def _cleanup_service(self):
        """Nettoie les ressources avant l'arr√™t."""
        self.stdout.write('üßπ Nettoyage des ressources...')
        
        try:
            # Arr√™ter le gestionnaire d'√©v√©nements
            if self.enable_events:
                await realtime_event_manager.stop()
                self.stdout.write('  ‚úÖ Gestionnaire d\'√©v√©nements arr√™t√©')
            
            # Notification d'arr√™t
            ubuntu_notification_service.send_notification(
                title="üõë Service Central GNS3 Arr√™t√©",
                message="Service arr√™t√© proprement",
                urgency='low',
                category='system.gns3'
            )
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Nettoyage termin√©')
            )
            
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage: {e}")
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur lors du nettoyage: {e}')
            )