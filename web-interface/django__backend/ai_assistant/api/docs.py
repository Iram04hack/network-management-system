"""
Configuration Swagger/OpenAPI pour le module AI Assistant.
Ce module configure la documentation interactive de l'API.
"""

from drf_yasg import openapi
from drf_yasg.views import get_schema_view
from rest_framework import permissions
from django.urls import path, include

# Configuration du sch√©ma OpenAPI
schema_view = get_schema_view(
    openapi.Info(
        title="ü§ñ AI Assistant API",
        default_version='v2.0',
        description="""
# ü§ñ API Assistant IA - Documentation Interactive

## Vue d'ensemble

Cette API fournit des services d'assistant IA pour la gestion de r√©seaux informatiques, 
incluant la g√©n√©ration de r√©ponses intelligentes, l'ex√©cution s√©curis√©e de commandes, 
la gestion documentaire et l'analyse r√©seau.

## üèóÔ∏è Architecture

Le module utilise une architecture orient√©e services avec :
- **Services de Domaine** : Logique m√©tier sp√©cialis√©e
- **API REST** : Interface standardis√©e avec DRF
- **S√©curit√© Int√©gr√©e** : Validation et sandbox pour les commandes
- **IA Multi-Providers** : Support OpenAI, Anthropic, HuggingFace

## üîê Authentification

Toutes les requ√™tes n√©cessitent une authentification via token :
```
Authorization: Bearer <votre_token>
```

## üöÄ D√©marrage Rapide

1. **Cr√©er une conversation :**
   ```bash
   POST /api/conversations/
   ```

2. **Envoyer un message :**
   ```bash
   POST /api/conversations/{id}/messages/
   ```

3. **Ex√©cuter une commande :**
   ```bash
   POST /api/commands/execute/
   ```

## üìä Codes de R√©ponse

- `200` : Succ√®s
- `201` : Cr√©√© avec succ√®s
- `400` : Requ√™te invalide
- `401` : Non authentifi√©
- `403` : Non autoris√©
- `404` : Ressource non trouv√©e
- `429` : Trop de requ√™tes
- `500` : Erreur serveur

## ‚ú® Nouveaut√©s Version 2.0

- ‚úÖ **Simulations √©limin√©es** : 100% d'impl√©mentations r√©elles
- ‚úÖ **S√©curit√© renforc√©e** : Validation multi-types, sandbox Python
- ‚úÖ **Nouveaux services** : Documents, analyse r√©seau, recherche
- ‚úÖ **Configuration production** : Validation automatique, monitoring
- ‚úÖ **Tests exhaustifs** : Couverture 85%, tests anti-simulation

## üîó Liens Utiles

- [Guide de Migration](../MIGRATION_REPORT.md)
- [Configuration Production](../config/production_settings.py)
- [Tests Anti-Simulation](../tests/test_anti_simulation.py)
        """,
        terms_of_service="https://www.example.com/terms/",
        contact=openapi.Contact(
            name="√âquipe AI Assistant",
            email="ai-assistant@example.com"
        ),
        license=openapi.License(name="MIT License"),
    ),
    public=True,
    permission_classes=[permissions.AllowAny],
    patterns=[
        path('api/', include('ai_assistant.api.urls')),
    ],
)

# Tags pour organiser les endpoints
API_TAGS = {
    'conversations': {
        'name': 'üí¨ Conversations',
        'description': 'Gestion des conversations avec l\'IA'
    },
    'commands': {
        'name': '‚ö° Commandes',
        'description': 'Ex√©cution et validation de commandes syst√®me'
    },
    'documents': {
        'name': 'üìö Documents',
        'description': 'Gestion de la base documentaire'
    },
    'search': {
        'name': 'üîç Recherche',
        'description': 'Recherche intelligente multi-sources'
    },
    'network': {
        'name': 'üåê Analyse R√©seau',
        'description': 'Outils d\'analyse et diagnostic r√©seau'
    }
}

# Param√®tres communs pour la documentation
COMMON_PARAMETERS = {
    'page': openapi.Parameter(
        'page',
        openapi.IN_QUERY,
        description="Num√©ro de page pour la pagination",
        type=openapi.TYPE_INTEGER,
        default=1
    ),
    'page_size': openapi.Parameter(
        'page_size',
        openapi.IN_QUERY,
        description="Nombre d'√©l√©ments par page",
        type=openapi.TYPE_INTEGER,
        default=20,
        maximum=100
    ),
    'search': openapi.Parameter(
        'search',
        openapi.IN_QUERY,
        description="Terme de recherche",
        type=openapi.TYPE_STRING
    ),
    'ordering': openapi.Parameter(
        'ordering',
        openapi.IN_QUERY,
        description="Champ de tri (pr√©fixer par '-' pour ordre d√©croissant)",
        type=openapi.TYPE_STRING
    )
}

# R√©ponses communes
COMMON_RESPONSES = {
    400: openapi.Response(
        description="Requ√™te invalide",
        schema=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'error': openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'code': openapi.Schema(type=openapi.TYPE_STRING),
                        'message': openapi.Schema(type=openapi.TYPE_STRING),
                        'details': openapi.Schema(type=openapi.TYPE_OBJECT),
                        'timestamp': openapi.Schema(type=openapi.TYPE_STRING, format='datetime'),
                        'request_id': openapi.Schema(type=openapi.TYPE_STRING)
                    }
                )
            }
        )
    ),
    401: openapi.Response(
        description="Non authentifi√©",
        schema=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'detail': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default="Identifiants d'authentification non fournis."
                )
            }
        )
    ),
    403: openapi.Response(
        description="Non autoris√©",
        schema=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'detail': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default="Vous n'avez pas la permission d'effectuer cette action."
                )
            }
        )
    ),
    404: openapi.Response(
        description="Ressource non trouv√©e",
        schema=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'detail': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default="Ressource non trouv√©e."
                )
            }
        )
    ),
    429: openapi.Response(
        description="Trop de requ√™tes",
        schema=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'detail': openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default="Limite de requ√™tes d√©pass√©e."
                ),
                'retry_after': openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="Nombre de secondes √† attendre avant la prochaine requ√™te"
                )
            }
        )
    ),
    500: openapi.Response(
        description="Erreur serveur interne",
        schema=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'error': openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message': openapi.Schema(type=openapi.TYPE_STRING),
                        'request_id': openapi.Schema(type=openapi.TYPE_STRING)
                    }
                )
            }
        )
    )
}

# Sch√©mas de donn√©es personnalis√©s
CUSTOM_SCHEMAS = {
    'AIResponse': openapi.Schema(
        type=openapi.TYPE_OBJECT,
        title="R√©ponse IA",
        description="Structure standard d'une r√©ponse g√©n√©r√©e par l'IA",
        properties={
            'content': openapi.Schema(
                type=openapi.TYPE_STRING,
                description="Contenu de la r√©ponse g√©n√©r√©e"
            ),
            'confidence': openapi.Schema(
                type=openapi.TYPE_NUMBER,
                format='float',
                minimum=0.0,
                maximum=1.0,
                description="Score de confiance de la r√©ponse"
            ),
            'processing_time': openapi.Schema(
                type=openapi.TYPE_NUMBER,
                format='float',
                description="Temps de traitement en secondes"
            ),
            'actions': openapi.Schema(
                type=openapi.TYPE_ARRAY,
                description="Actions sugg√©r√©es ou extraites",
                items=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'type': openapi.Schema(type=openapi.TYPE_STRING),
                        'data': openapi.Schema(type=openapi.TYPE_OBJECT)
                    }
                )
            ),
            'sources': openapi.Schema(
                type=openapi.TYPE_ARRAY,
                description="Sources utilis√©es pour la r√©ponse",
                items=openapi.Schema(type=openapi.TYPE_STRING)
            ),
            'metadata': openapi.Schema(
                type=openapi.TYPE_OBJECT,
                description="M√©tadonn√©es additionnelles"
            )
        },
        required=['content']
    ),
    
    'CommandResult': openapi.Schema(
        type=openapi.TYPE_OBJECT,
        title="R√©sultat de Commande",
        description="R√©sultat de l'ex√©cution d'une commande syst√®me",
        properties={
            'success': openapi.Schema(
                type=openapi.TYPE_BOOLEAN,
                description="Indique si la commande a r√©ussi"
            ),
            'command': openapi.Schema(
                type=openapi.TYPE_STRING,
                description="Commande ex√©cut√©e"
            ),
            'output': openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    'stdout': openapi.Schema(type=openapi.TYPE_STRING),
                    'stderr': openapi.Schema(type=openapi.TYPE_STRING),
                    'return_code': openapi.Schema(type=openapi.TYPE_INTEGER)
                }
            ),
            'execution_time': openapi.Schema(
                type=openapi.TYPE_NUMBER,
                format='float',
                description="Temps d'ex√©cution en secondes"
            ),
            'analysis': openapi.Schema(
                type=openapi.TYPE_OBJECT,
                description="Analyse de s√©curit√© de la commande",
                properties={
                    'safety_score': openapi.Schema(type=openapi.TYPE_NUMBER, format='float'),
                    'detected_risks': openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_STRING)),
                    'recommendations': openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_STRING))
                }
            )
        },
        required=['success', 'command']
    ),
    
    'SearchResult': openapi.Schema(
        type=openapi.TYPE_OBJECT,
        title="R√©sultat de Recherche",
        description="R√©sultat d'une recherche dans la base de connaissances",
        properties={
            'results': openapi.Schema(
                type=openapi.TYPE_ARRAY,
                items=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'type': openapi.Schema(
                            type=openapi.TYPE_STRING,
                            enum=['document', 'conversation', 'command'],
                            description="Type de r√©sultat"
                        ),
                        'id': openapi.Schema(type=openapi.TYPE_INTEGER),
                        'title': openapi.Schema(type=openapi.TYPE_STRING),
                        'snippet': openapi.Schema(type=openapi.TYPE_STRING),
                        'score': openapi.Schema(type=openapi.TYPE_NUMBER, format='float'),
                        'url': openapi.Schema(type=openapi.TYPE_STRING),
                        'metadata': openapi.Schema(type=openapi.TYPE_OBJECT)
                    }
                )
            ),
            'total': openapi.Schema(type=openapi.TYPE_INTEGER),
            'execution_time': openapi.Schema(type=openapi.TYPE_NUMBER, format='float'),
            'query_analysis': openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    'intent': openapi.Schema(type=openapi.TYPE_STRING),
                    'entities': openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_STRING)),
                    'suggestions': openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_STRING))
                }
            )
        }
    ),
    
    'NetworkPingResult': openapi.Schema(
        type=openapi.TYPE_OBJECT,
        title="R√©sultat Ping",
        description="R√©sultat d'un test de ping r√©seau",
        properties={
            'success': openapi.Schema(type=openapi.TYPE_BOOLEAN),
            'target': openapi.Schema(type=openapi.TYPE_STRING),
            'packets_sent': openapi.Schema(type=openapi.TYPE_INTEGER),
            'packets_received': openapi.Schema(type=openapi.TYPE_INTEGER),
            'packet_loss': openapi.Schema(type=openapi.TYPE_NUMBER, format='float'),
            'min_time': openapi.Schema(type=openapi.TYPE_NUMBER, format='float'),
            'max_time': openapi.Schema(type=openapi.TYPE_NUMBER, format='float'),
            'avg_time': openapi.Schema(type=openapi.TYPE_NUMBER, format='float'),
            'results': openapi.Schema(
                type=openapi.TYPE_ARRAY,
                items=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'sequence': openapi.Schema(type=openapi.TYPE_INTEGER),
                        'time': openapi.Schema(type=openapi.TYPE_NUMBER, format='float'),
                        'ttl': openapi.Schema(type=openapi.TYPE_INTEGER)
                    }
                )
            )
        }
    ),

    'ConversationDetail': openapi.Schema(
        type=openapi.TYPE_OBJECT,
        title="D√©tail de Conversation",
        description="D√©tails complets d'une conversation",
        properties={
            'id': openapi.Schema(type=openapi.TYPE_INTEGER),
            'title': openapi.Schema(type=openapi.TYPE_STRING),
            'created_at': openapi.Schema(type=openapi.TYPE_STRING, format='datetime'),
            'updated_at': openapi.Schema(type=openapi.TYPE_STRING, format='datetime'),
            'user_id': openapi.Schema(type=openapi.TYPE_INTEGER),
            'messages': openapi.Schema(
                type=openapi.TYPE_ARRAY,
                items=openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'id': openapi.Schema(type=openapi.TYPE_INTEGER),
                        'role': openapi.Schema(type=openapi.TYPE_STRING, enum=['user', 'assistant', 'system']),
                        'content': openapi.Schema(type=openapi.TYPE_STRING),
                        'timestamp': openapi.Schema(type=openapi.TYPE_STRING, format='datetime'),
                        'metadata': openapi.Schema(type=openapi.TYPE_OBJECT)
                    }
                )
            )
        }
    ),

    'DocumentDetail': openapi.Schema(
        type=openapi.TYPE_OBJECT,
        title="D√©tail de Document",
        description="D√©tails complets d'un document",
        properties={
            'id': openapi.Schema(type=openapi.TYPE_INTEGER),
            'title': openapi.Schema(type=openapi.TYPE_STRING),
            'content': openapi.Schema(type=openapi.TYPE_STRING),
            'summary': openapi.Schema(type=openapi.TYPE_STRING),
            'category': openapi.Schema(type=openapi.TYPE_STRING),
            'tags': openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_STRING)),
            'author': openapi.Schema(type=openapi.TYPE_STRING),
            'is_public': openapi.Schema(type=openapi.TYPE_BOOLEAN),
            'created_at': openapi.Schema(type=openapi.TYPE_STRING, format='datetime'),
            'updated_at': openapi.Schema(type=openapi.TYPE_STRING, format='datetime'),
            'metadata': openapi.Schema(type=openapi.TYPE_OBJECT)
        }
    )
}

# Exemples de requ√™tes pour la documentation
REQUEST_EXAMPLES = {
    'create_conversation': {
        'summary': 'Cr√©er une nouvelle conversation',
        'value': {
            'title': 'Configuration VLAN',
            'initial_message': 'Comment configurer un VLAN sur un switch Cisco ?'
        }
    },
    'send_message': {
        'summary': 'Envoyer un message dans une conversation',
        'value': {
            'content': 'Peux-tu d√©tailler la configuration du port trunk ?',
            'context': {
                'previous_topic': 'vlan_configuration'
            }
        }
    },
    'execute_command': {
        'summary': 'Ex√©cuter une commande r√©seau',
        'value': {
            'command': 'ping 192.168.1.1',
            'type': 'network',
            'parameters': {
                'count': 4,
                'timeout': 10
            },
            'validation_level': 'strict'
        }
    },
    'search_global': {
        'summary': 'Recherche globale',
        'value': {
            'query': 'configuration vlan trunk',
            'filters': {
                'categories': ['network', 'documentation'],
                'date_range': {
                    'start': '2024-01-01',
                    'end': '2024-01-31'
                }
            },
            'options': {
                'max_results': 20,
                'include_snippets': True,
                'semantic_search': True
            }
        }
    },
    'create_document': {
        'summary': 'Cr√©er un nouveau document',
        'value': {
            'title': 'Guide Configuration VLAN',
            'content': '# Configuration VLAN\n\nCe guide pr√©sente les √©tapes...',
            'category': 'network',
            'tags': ['vlan', 'network', 'configuration'],
            'is_public': True,
            'metadata': {
                'version': '1.0',
                'language': 'fr'
            }
        }
    },
    'network_ping': {
        'summary': 'Test de ping r√©seau',
        'value': {
            'target': '192.168.1.1',
            'count': 4,
            'timeout': 5
        }
    }
}

# Configuration des URLs Swagger
swagger_urls = [
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    path('swagger.json', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('swagger.yaml', schema_view.without_ui(cache_timeout=0), name='schema-yaml'),
]

def get_swagger_settings():
    """
    Retourne la configuration Swagger pour inclusion dans settings.py
    """
    return {
        'SWAGGER_SETTINGS': {
            'SECURITY_DEFINITIONS': {
                'Bearer': {
                    'type': 'apiKey',
                    'name': 'Authorization',
                    'in': 'header',
                    'description': 'Token d\'authentification Bearer. Format: Bearer <token>'
                }
            },
            'USE_SESSION_AUTH': False,
            'PERSIST_AUTH': True,
            'REFETCH_SCHEMA_WITH_AUTH': True,
            'REFETCH_SCHEMA_ON_LOGOUT': True,
            'DEFAULT_INFO': 'ai_assistant.api.docs.schema_view',
            'SPEC_URL': '/api/swagger.json',
            'LOGIN_URL': '/admin/login/',
            'LOGOUT_URL': '/admin/logout/',
            'DOC_EXPANSION': 'none',
            'DEEP_LINKING': True,
            'SHOW_EXTENSIONS': True,
            'DEFAULT_MODEL_RENDERING': 'example',
            'DEFAULT_MODEL_DEPTH': 3,
            'TAGS_SORTER': 'alpha',
            'OPERATIONS_SORTER': 'alpha',
            'VALIDATOR_URL': None,
        },
        'REDOC_SETTINGS': {
            'LAZY_RENDERING': False,
            'HIDE_HOSTNAME': False,
            'EXPAND_RESPONSES': ['200', '201'],
            'PATH_IN_MIDDLE': True,
            'REQUIRED_PROPS_FIRST': True,
            'SPEC_URL': '/api/swagger.json',
        }
    }

# D√©corateurs pour les vues API
def swagger_auto_schema_extended(**kwargs):
    """
    D√©corateur √©tendu pour la documentation Swagger avec param√®tres par d√©faut
    """
    from drf_yasg.utils import swagger_auto_schema
    
    # Ajouter les r√©ponses communes si non sp√©cifi√©es
    if 'responses' not in kwargs:
        kwargs['responses'] = {}
    
    # Merger avec les r√©ponses communes
    for status_code, response in COMMON_RESPONSES.items():
        if status_code not in kwargs['responses']:
            kwargs['responses'][status_code] = response
    
    return swagger_auto_schema(**kwargs)

# Tags de s√©curit√© pour les endpoints
SECURITY_REQUIREMENTS = [
    {
        'Bearer': []
    }
]