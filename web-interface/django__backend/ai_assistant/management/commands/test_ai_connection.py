from django.core.management.base import BaseCommand
from ai_assistant.models import AIModel
from ai_assistant.application.chatbot_service import ChatbotService

class Command(BaseCommand):
    help = 'Teste la connectivit√© avec les services IA'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--model',
            type=str,
            help='Nom du mod√®le IA √† tester (teste tous si non sp√©cifi√©)',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Affichage d√©taill√©',
        )
    
    def handle(self, *args, **options):
        self.stdout.write("üîç Test de connectivit√© des services IA...")
        
        # S√©lectionner les mod√®les √† tester
        if options['model']:
            models = AIModel.objects.filter(name=options['model'], is_active=True)
            if not models.exists():
                self.stderr.write(f"‚ùå Mod√®le '{options['model']}' non trouv√© ou inactif")
                return
        else:
            models = AIModel.objects.filter(is_active=True)
        
        if not models.exists():
            self.stderr.write("‚ùå Aucun mod√®le IA actif trouv√©")
            return
        
        self.stdout.write(f"üìã Test de {models.count()} mod√®le(s)...\n")
        
        # Initialiser le service chatbot
        try:
            chatbot_service = ChatbotService()
        except Exception as e:
            self.stderr.write(f"‚ùå Erreur d'initialisation du service chatbot: {e}")
            return
        
        success_count = 0
        total_count = models.count()
        
        for model in models:
            self.stdout.write(f"üß™ Test du mod√®le: {model.name} ({model.provider})")
            
            # V√©rifier la configuration
            config_ok = True
            if model.provider in ['openai', 'anthropic'] and not model.api_key:
                self.stdout.write("  ‚ö†Ô∏è  Cl√© API manquante")
                config_ok = False
            
            if not model.model_name:
                self.stdout.write("  ‚ö†Ô∏è  Nom de mod√®le manquant")
                config_ok = False
            
            if not config_ok:
                self.stdout.write("  ‚ùå Configuration incompl√®te\n")
                continue
            
            # Test de connectivit√©
            try:
                test_message = "Bonjour, pouvez-vous me r√©pondre bri√®vement ?"
                
                # Simuler une requ√™te (√† adapter selon votre impl√©mentation)
                start_time = __import__('time').time()
                
                # NOTE: Cette partie doit √™tre adapt√©e selon votre impl√©mentation r√©elle
                # Si vous avez des simulations, ce test les d√©tectera
                response = chatbot_service.process_message(
                    test_message, 
                    user_id=1,  # Utilisateur de test
                    force_model=model.name
                )
                
                end_time = __import__('time').time()
                latency = round(end_time - start_time, 3)
                
                if response and response.get('content'):
                    content = response['content']
                    
                    # D√©tecter les simulations
                    simulation_indicators = [
                        'simulation', 'simul√©', 'placeholder', 'test',
                        'non impl√©ment√©', 'non impl√©ment√©e', 'factice'
                    ]
                    
                    is_simulation = any(indicator in content.lower() for indicator in simulation_indicators)
                    
                    if is_simulation:
                        self.stdout.write(f"  ‚ö†Ô∏è  R√©ponse simul√©e d√©tect√©e: {content[:100]}...")
                        self.stdout.write("  ‚ùå SIMULATION - Pas d'impl√©mentation r√©elle\n")
                    else:
                        self.stdout.write(f"  ‚úÖ R√©ponse re√ßue ({latency}s)")
                        if options['verbose']:
                            self.stdout.write(f"     Contenu: {content[:100]}...")
                        self.stdout.write("  ‚úÖ Test r√©ussi\n")
                        success_count += 1
                else:
                    self.stdout.write("  ‚ùå Aucune r√©ponse re√ßue\n")
                    
            except Exception as e:
                self.stdout.write(f"  ‚ùå Erreur: {str(e)}\n")
        
        # R√©sum√© final
        self.stdout.write("=" * 50)
        self.stdout.write(f"üìä R√©sultats: {success_count}/{total_count} mod√®les fonctionnels")
        
        if success_count == total_count:
            self.stdout.write(self.style.SUCCESS("üéâ Tous les tests ont r√©ussi !"))
        elif success_count > 0:
            self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è  {total_count - success_count} mod√®le(s) en √©chec"))
        else:
            self.stdout.write(self.style.ERROR("‚ùå Aucun mod√®le fonctionnel"))
        
        # Recommandations
        if success_count < total_count:
            self.stdout.write("\nüí° Recommandations:")
            self.stdout.write("  ‚Ä¢ V√©rifiez les cl√©s API dans l'admin Django")
            self.stdout.write("  ‚Ä¢ Contr√¥lez la connectivit√© Internet")
            self.stdout.write("  ‚Ä¢ Consultez les logs pour plus de d√©tails")
            self.stdout.write("  ‚Ä¢ √âliminez toutes les simulations du code")