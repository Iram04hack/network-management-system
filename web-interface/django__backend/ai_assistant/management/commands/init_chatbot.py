from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from ai_assistant.models import AIModel, KnowledgeBase, Command

class Command(BaseCommand):
    help = 'Initialise le chatbot avec les donn√©es de base'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--skip-models',
            action='store_true',
            help='Skip AI models creation',
        )
        parser.add_argument(
            '--skip-knowledge',
            action='store_true', 
            help='Skip knowledge base creation',
        )
        parser.add_argument(
            '--skip-commands',
            action='store_true',
            help='Skip commands creation',
        )
    
    def handle(self, *args, **options):
        self.stdout.write("üöÄ Initialisation du chatbot...")
        
        created_count = 0
        
        # Cr√©er les mod√®les IA par d√©faut
        if not options['skip_models']:
            models_data = [
                {
                    "name": "ChatGPT-3.5",
                    "provider": "openai",
                    "model_name": "gpt-3.5-turbo",
                    "capabilities": {
                        "chat": True,
                        "code_generation": True,
                        "analysis": True
                    },
                    "max_tokens": 4096,
                    "temperature": 0.7
                },
                {
                    "name": "ChatGPT-4",
                    "provider": "openai", 
                    "model_name": "gpt-4",
                    "capabilities": {
                        "chat": True,
                        "code_generation": True,
                        "analysis": True,
                        "complex_reasoning": True
                    },
                    "max_tokens": 8192,
                    "temperature": 0.7
                },
                {
                    "name": "Claude-3",
                    "provider": "anthropic",
                    "model_name": "claude-3-sonnet-20240229",
                    "capabilities": {
                        "chat": True,
                        "analysis": True,
                        "safety": True
                    },
                    "max_tokens": 4096,
                    "temperature": 0.7
                }
            ]
            
            for model_data in models_data:
                model, created = AIModel.objects.get_or_create(
                    name=model_data["name"],
                    defaults=model_data
                )
                if created:
                    created_count += 1
                    self.stdout.write(f"  ‚úÖ Mod√®le IA cr√©√©: {model_data['name']}")
        
        # Cr√©er la base de connaissances par d√©faut
        if not options['skip_knowledge']:
            knowledge_data = [
                {
                    "category": "network",
                    "question": "Comment configurer un VLAN ?",
                    "answer": "Pour configurer un VLAN, utilisez les commandes suivantes:\n1. Entrez en mode configuration: enable -> configure terminal\n2. Cr√©ez le VLAN: vlan [num√©ro]\n3. Nommez le VLAN: name [nom]\n4. Assignez des ports: interface [port] -> switchport mode access -> switchport access vlan [num√©ro]",
                    "keywords": ["vlan", "configuration", "r√©seau", "switch"],
                    "related_commands": ["vlan", "interface", "switchport"]
                },
                {
                    "category": "security",
                    "question": "Comment s√©curiser les ports SSH ?",
                    "answer": "Pour s√©curiser SSH:\n1. Changez le port par d√©faut dans /etc/ssh/sshd_config\n2. D√©sactivez l'authentification par mot de passe\n3. Utilisez des cl√©s SSH\n4. Configurez fail2ban\n5. Limitez les utilisateurs autoris√©s",
                    "keywords": ["ssh", "s√©curit√©", "authentification", "fail2ban"],
                    "related_commands": ["ssh", "scp", "ssh-keygen"]
                },
                {
                    "category": "troubleshooting",
                    "question": "Comment diagnostiquer des probl√®mes de connectivit√© r√©seau ?",
                    "answer": "√âtapes de diagnostic:\n1. V√©rifiez la connectivit√© physique\n2. Testez avec ping\n3. V√©rifiez la table de routage (route -n)\n4. Contr√¥lez les r√®gles firewall\n5. Analysez les logs syst√®mes\n6. Utilisez traceroute pour tracer le chemin",
                    "keywords": ["diagnostic", "connectivit√©", "ping", "route", "firewall"],
                    "related_commands": ["ping", "traceroute", "netstat", "ss"]
                },
                {
                    "category": "monitoring",
                    "question": "Comment surveiller les performances r√©seau ?",
                    "answer": "Outils de monitoring r√©seau:\n1. SNMP pour les √©quipements\n2. Nagios/Zabbix pour la supervision\n3. Wireshark pour l'analyse de trafic\n4. iftop/nload pour la bande passante\n5. MRTG/Cacti pour les graphiques\n6. Logs d'√©v√©nements",
                    "keywords": ["monitoring", "snmp", "nagios", "wireshark", "surveillance"],
                    "related_commands": ["snmpwalk", "iftop", "nload", "tcpdump"]
                }
            ]
            
            for kb_data in knowledge_data:
                kb, created = KnowledgeBase.objects.get_or_create(
                    question=kb_data["question"],
                    defaults=kb_data
                )
                if created:
                    created_count += 1
                    self.stdout.write(f"  üìö Entr√©e KB cr√©√©e: {kb_data['category']}")
        
        # Cr√©er les commandes par d√©faut
        if not options['skip_commands']:
            commands_data = [
                {
                    "name": "ping",
                    "category": "network",
                    "description": "Teste la connectivit√© vers une adresse IP",
                    "command_template": "ping -c 4 {target}",
                    "parameters": {
                        "target": {
                            "type": "string",
                            "required": True,
                            "description": "Adresse IP ou nom d'h√¥te cible"
                        }
                    },
                    "required_permission": "read",
                    "is_safe": True,
                    "timeout_seconds": 30
                },
                {
                    "name": "show_interfaces",
                    "category": "network",
                    "description": "Affiche l'√©tat des interfaces r√©seau",
                    "command_template": "ip addr show",
                    "parameters": {},
                    "required_permission": "read",
                    "is_safe": True,
                    "timeout_seconds": 10
                },
                {
                    "name": "show_routes",
                    "category": "network", 
                    "description": "Affiche la table de routage",
                    "command_template": "ip route show",
                    "parameters": {},
                    "required_permission": "read",
                    "is_safe": True,
                    "timeout_seconds": 10
                },
                {
                    "name": "restart_service",
                    "category": "system",
                    "description": "Red√©marre un service syst√®me",
                    "command_template": "systemctl restart {service}",
                    "parameters": {
                        "service": {
                            "type": "string",
                            "required": True,
                            "description": "Nom du service √† red√©marrer"
                        }
                    },
                    "required_permission": "admin",
                    "is_safe": False,
                    "timeout_seconds": 60
                },
                {
                    "name": "check_disk_space",
                    "category": "monitoring",
                    "description": "V√©rifie l'espace disque disponible",
                    "command_template": "df -h",
                    "parameters": {},
                    "required_permission": "read",
                    "is_safe": True,
                    "timeout_seconds": 10
                }
            ]
            
            for cmd_data in commands_data:
                cmd, created = Command.objects.get_or_create(
                    name=cmd_data["name"],
                    defaults=cmd_data
                )
                if created:
                    created_count += 1
                    self.stdout.write(f"  ‚ö° Commande cr√©√©e: {cmd_data['name']}")
        
        # Cr√©er un utilisateur syst√®me pour le bot
        system_user, created = User.objects.get_or_create(
            username='ai_assistant_system',
            defaults={
                'email': 'ai-assistant@nms.local',
                'first_name': 'AI',
                'last_name': 'Assistant',
                'is_staff': False,
                'is_active': True
            }
        )
        
        if created:
            created_count += 1
            self.stdout.write("  üë§ Utilisateur syst√®me cr√©√©")
        
        # Statistiques finales
        total_models = AIModel.objects.count()
        total_knowledge = KnowledgeBase.objects.count()
        total_commands = Command.objects.count()
        
        self.stdout.write("\nüìä √âtat du syst√®me:")
        self.stdout.write(f"  ‚Ä¢ Mod√®les IA: {total_models}")
        self.stdout.write(f"  ‚Ä¢ Entr√©es KB: {total_knowledge}")
        self.stdout.write(f"  ‚Ä¢ Commandes: {total_commands}")
        self.stdout.write(f"  ‚Ä¢ Cr√©√©s cette session: {created_count}")
        
        self.stdout.write(self.style.SUCCESS("\nüéâ Chatbot initialis√© avec succ√®s !"))
        
        # Conseils pour la suite
        self.stdout.write("\nüí° Prochaines √©tapes recommand√©es:")
        self.stdout.write("  1. Configurez les cl√©s API dans les mod√®les IA")
        self.stdout.write("  2. Testez la connectivit√© avec: python manage.py test_ai_connection")
        self.stdout.write("  3. Cr√©ez des migrations: python manage.py makemigrations")
        self.stdout.write("  4. Appliquez les migrations: python manage.py migrate")