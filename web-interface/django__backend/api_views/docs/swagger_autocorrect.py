"""
Auto-correcteur de documentation Swagger pour api_views.

Ce script corrige automatiquement tous les probl√®mes de documentation Swagger
identifi√©s par le validateur en ajoutant les d√©corateurs et informations manquantes.
"""

import os
import re
import ast
from pathlib import Path
from typing import Dict, List, Tuple


class SwaggerAutoCorrector:
    """Auto-correcteur de documentation Swagger."""
    
    def __init__(self):
        self.base_path = Path(__file__).parent.parent / "views"
        self.corrections_count = 0
        self.files_modified = []
        
        # Templates de documentation pour chaque type de m√©thode
        self.method_templates = {
            'list': {
                'summary': "Liste tous les {resource_name}",
                'description': "R√©cup√®re la liste compl√®te des {resource_name} avec filtrage, tri et pagination.",
                'parameters': [
                    "openapi.Parameter('page', openapi.IN_QUERY, description='Num√©ro de page', type=openapi.TYPE_INTEGER, default=1)",
                    "openapi.Parameter('page_size', openapi.IN_QUERY, description='√âl√©ments par page', type=openapi.TYPE_INTEGER, default=20)",
                    "openapi.Parameter('search', openapi.IN_QUERY, description='Recherche textuelle', type=openapi.TYPE_STRING)",
                    "openapi.Parameter('ordering', openapi.IN_QUERY, description='Champ de tri', type=openapi.TYPE_STRING)",
                ],
                'responses': {
                    "200": "Liste r√©cup√©r√©e avec succ√®s",
                    "401": "Non authentifi√©",
                    "500": "Erreur serveur"
                }
            },
            'create': {
                'summary': "Cr√©e un nouveau {resource_name}",
                'description': "Cr√©e un nouveau {resource_name} avec validation des donn√©es et configuration automatique.",
                'responses': {
                    "201": "Cr√©√© avec succ√®s",
                    "400": "Donn√©es invalides",
                    "401": "Non authentifi√©",
                    "500": "Erreur serveur"
                }
            },
            'retrieve': {
                'summary': "D√©tails d'un {resource_name}",
                'description': "R√©cup√®re les d√©tails complets d'un {resource_name} sp√©cifique.",
                'responses': {
                    "200": "D√©tails r√©cup√©r√©s avec succ√®s",
                    "404": "Non trouv√©",
                    "401": "Non authentifi√©",
                    "500": "Erreur serveur"
                }
            },
            'update': {
                'summary': "Met √† jour un {resource_name}",
                'description': "Met √† jour compl√®tement un {resource_name} existant.",
                'responses': {
                    "200": "Mis √† jour avec succ√®s",
                    "400": "Donn√©es invalides",
                    "404": "Non trouv√©",
                    "401": "Non authentifi√©",
                    "500": "Erreur serveur"
                }
            },
            'partial_update': {
                'summary': "Met √† jour partiellement un {resource_name}",
                'description': "Met √† jour partiellement un {resource_name} existant.",
                'responses': {
                    "200": "Mis √† jour avec succ√®s",
                    "400": "Donn√©es invalides",
                    "404": "Non trouv√©",
                    "401": "Non authentifi√©",
                    "500": "Erreur serveur"
                }
            },
            'destroy': {
                'summary': "Supprime un {resource_name}",
                'description': "Supprime d√©finitivement un {resource_name} du syst√®me.",
                'responses': {
                    "204": "Supprim√© avec succ√®s",
                    "404": "Non trouv√©",
                    "401": "Non authentifi√©",
                    "403": "Permission refus√©e",
                    "500": "Erreur serveur"
                }
            }
        }
        
        # Correspondance ViewSet -> nom de ressource
        self.resource_names = {
            'DashboardViewSet': 'tableau de bord',
            'DashboardWidgetViewSet': 'widget de tableau de bord',
            'DeviceManagementViewSet': '√©quipement r√©seau',
            'GlobalSearchViewSet': 'recherche globale',
            'ResourceSearchViewSet': 'recherche de ressource',
            'SearchHistoryViewSet': 'historique de recherche',
            'TopologyDiscoveryViewSet': 'd√©couverte de topologie',
            'PrometheusViewSet': 'm√©trique Prometheus',
            'GrafanaViewSet': 'dashboard Grafana',
            'Fail2banViewSet': 'configuration Fail2ban',
            'SuricataViewSet': 'r√®gle Suricata',
        }
    
    def correct_all_files(self):
        """Corrige tous les fichiers ViewSets."""
        print("üîß === AUTO-CORRECTION SWAGGER API_VIEWS ===\n")
        
        view_files = [
            'dashboard_views.py',
            'device_management_views.py',
            'search_views.py',
            'topology_discovery_views.py',
            'prometheus_views.py',
            'grafana_views.py',
            'security_views.py'
        ]
        
        for file_name in view_files:
            file_path = self.base_path / file_name
            if file_path.exists():
                print(f"üìù Correction de {file_name}...")
                self._correct_file(file_path)
            else:
                print(f"‚ö†Ô∏è Fichier non trouv√©: {file_name}")
        
        self._print_summary()
    
    def _correct_file(self, file_path: Path):
        """Corrige un fichier sp√©cifique."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # Ajouter les imports n√©cessaires si manquants
            content = self._ensure_swagger_imports(content)
            
            # Trouver et corriger les ViewSets
            content = self._correct_viewsets_in_content(content, file_path.name)
            
            if content != original_content:
                # Sauvegarder le fichier modifi√©
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                self.files_modified.append(str(file_path))
                print(f"  ‚úÖ {file_path.name} corrig√©")
            else:
                print(f"  ‚ÑπÔ∏è {file_path.name} d√©j√† correct")
                
        except Exception as e:
            print(f"  ‚ùå Erreur lors de la correction de {file_path.name}: {e}")
    
    def _ensure_swagger_imports(self, content: str) -> str:
        """S'assure que les imports Swagger sont pr√©sents."""
        required_imports = [
            "from drf_yasg.utils import swagger_auto_schema",
            "from drf_yasg import openapi"
        ]
        
        for import_line in required_imports:
            if import_line not in content:
                # Ajouter l'import apr√®s les autres imports drf_yasg s'ils existent
                if "from drf_yasg" in content:
                    content = re.sub(
                        r'(from drf_yasg[^\n]+\n)',
                        r'\1' + import_line + '\n',
                        content,
                        count=1
                    )
                else:
                    # Ajouter apr√®s les imports rest_framework
                    content = re.sub(
                        r'(from rest_framework[^\n]+\n)',
                        r'\1' + import_line + '\n',
                        content,
                        count=1
                    )
        
        return content
    
    def _correct_viewsets_in_content(self, content: str, filename: str) -> str:
        """Corrige les ViewSets dans le contenu du fichier."""
        # Pattern pour trouver les d√©finitions de m√©thodes dans les ViewSets
        method_pattern = r'(\s+)(def\s+(list|create|retrieve|update|partial_update|destroy|\w+)\s*\([^)]+\):)'
        
        lines = content.split('\n')
        new_lines = []
        i = 0
        
        while i < len(lines):
            line = lines[i]
            
            # V√©rifier si c'est une d√©finition de m√©thode
            method_match = re.match(method_pattern, line)
            if method_match:
                indent = method_match.group(1)
                method_def = method_match.group(2)
                method_name = method_match.group(3)
                
                # V√©rifier si la m√©thode a d√©j√† un d√©corateur swagger_auto_schema
                has_swagger = False
                j = i - 1
                while j >= 0 and lines[j].strip():
                    if '@swagger_auto_schema' in lines[j]:
                        has_swagger = True
                        break
                    if lines[j].strip() and not lines[j].strip().startswith('@'):
                        break
                    j -= 1
                
                if not has_swagger:
                    # Ajouter le d√©corateur swagger_auto_schema
                    swagger_decorator = self._generate_swagger_decorator(
                        method_name, indent, filename
                    )
                    new_lines.extend(swagger_decorator)
                    self.corrections_count += 1
            
            new_lines.append(line)
            i += 1
        
        return '\n'.join(new_lines)
    
    def _generate_swagger_decorator(self, method_name: str, indent: str, filename: str) -> List[str]:
        """G√©n√®re un d√©corateur swagger_auto_schema pour une m√©thode."""
        decorator_lines = []
        
        # D√©terminer le nom de la ressource
        viewset_name = self._extract_viewset_name_from_filename(filename)
        resource_name = self.resource_names.get(viewset_name, "ressource")
        
        # Utiliser le template appropri√© ou un template g√©n√©rique
        template = self.method_templates.get(method_name, {
            'summary': f"Action {method_name}",
            'description': f"Ex√©cute l'action {method_name} sur {resource_name}.",
            'responses': {
                "200": "Op√©ration r√©ussie",
                "401": "Non authentifi√©",
                "500": "Erreur serveur"
            }
        })
        
        # Formater avec le nom de la ressource
        summary = template['summary'].format(resource_name=resource_name)
        description = template['description'].format(resource_name=resource_name)
        
        # Construire le d√©corateur
        decorator_lines.append(f"{indent}@swagger_auto_schema(")
        decorator_lines.append(f"{indent}    operation_summary=\"{summary}\",")
        decorator_lines.append(f"{indent}    operation_description=\"{description}\",")
        
        # Ajouter les param√®tres si d√©finis
        if 'parameters' in template:
            decorator_lines.append(f"{indent}    manual_parameters=[")
            for param in template['parameters']:
                decorator_lines.append(f"{indent}        {param},")
            decorator_lines.append(f"{indent}    ],")
        
        # Ajouter les r√©ponses
        decorator_lines.append(f"{indent}    responses={{")
        for code, desc in template['responses'].items():
            decorator_lines.append(f"{indent}        {code}: \"{desc}\",")
        decorator_lines.append(f"{indent}    }},")
        
        # Ajouter le tag
        decorator_lines.append(f"{indent}    tags=['views']")
        decorator_lines.append(f"{indent})")
        
        return decorator_lines
    
    def _extract_viewset_name_from_filename(self, filename: str) -> str:
        """Extrait le nom principal du ViewSet depuis le nom de fichier."""
        viewset_mapping = {
            'dashboard_views.py': 'DashboardViewSet',
            'device_management_views.py': 'DeviceManagementViewSet',
            'search_views.py': 'GlobalSearchViewSet',
            'topology_discovery_views.py': 'TopologyDiscoveryViewSet',
            'prometheus_views.py': 'PrometheusViewSet',
            'grafana_views.py': 'GrafanaViewSet',
            'security_views.py': 'Fail2banViewSet',
        }
        return viewset_mapping.get(filename, 'ViewSet')
    
    def _print_summary(self):
        """Affiche le r√©sum√© des corrections."""
        print("\n" + "="*60)
        print("üìä === R√âSUM√â DES CORRECTIONS ===")
        print("="*60)
        
        print(f"\n‚ú® **CORRECTIONS APPLIQU√âES**")
        print(f"  ‚Ä¢ D√©corateurs ajout√©s: {self.corrections_count}")
        print(f"  ‚Ä¢ Fichiers modifi√©s: {len(self.files_modified)}")
        
        if self.files_modified:
            print(f"\nüìù **FICHIERS MODIFI√âS**")
            for file_path in self.files_modified:
                print(f"  ‚Ä¢ {Path(file_path).name}")
        
        print(f"\nüéØ **PROCHAINES √âTAPES**")
        print(f"  1. V√©rifier que le serveur Django d√©marre sans erreur")
        print(f"  2. Tester l'interface Swagger (/api/views/docs/)")
        print(f"  3. Ex√©cuter le validateur pour v√©rifier les am√©liorations")
        
        print(f"\n‚úÖ Auto-correction termin√©e!")


def main():
    """Point d'entr√©e principal."""
    corrector = SwaggerAutoCorrector()
    corrector.correct_all_files()


if __name__ == "__main__":
    main() 