"""
Am√©liorateur de descriptions Swagger pour api_views.
"""

import re
from pathlib import Path


class SwaggerDescriptionImprover:
    """Am√©liorateur de descriptions Swagger."""
    
    def __init__(self):
        self.files_modified = []
        self.improvements_count = 0
        
        # Descriptions sp√©cifiques par endpoint
        self.specific_descriptions = {
            # Dashboard endpoints
            'bulk_create.*tableau de bord': "Cr√©e plusieurs tableaux de bord simultan√©ment avec validation des donn√©es et gestion d'erreurs par batch.",
            'duplicate.*tableau de bord': "Cr√©e une copie compl√®te du tableau de bord avec possibilit√© de personnaliser le nom et la description.",
            'data.*tableau de bord': "R√©cup√®re les donn√©es temps r√©el du widget avec mise en cache et optimisations de performance.",
            'templates.*tableau de bord': "Liste tous les mod√®les de widgets pr√©-configur√©s avec aper√ßus et exemples d'utilisation.",
            
            # Device Management endpoints  
            'bulk_create.*√©quipement r√©seau': "Importe plusieurs √©quipements simultan√©ment via CSV ou auto-d√©couverte avec validation compl√®te.",
            'bulk_delete.*√©quipement r√©seau': "Supprime plusieurs √©quipements s√©lectionn√©s avec v√©rification des d√©pendances.",
            'create_device_old.*√©quipement r√©seau': "M√©thode h√©rit√©e de cr√©ation d'√©quipement maintenue pour compatibilit√©.",
            
            # Search endpoints
            'search.*recherche globale': "Effectue une recherche intelligente √† travers tous les types de ressources avec suggestions.",
            'suggestions.*recherche globale': "Fournit des suggestions de recherche contextuelles bas√©es sur l'historique utilisateur.",
            'filters.*recherche globale': "R√©cup√®re la liste compl√®te des filtres applicables par type de ressource.",
            'search_devices.*recherche globale': "Recherche avanc√©e dans les √©quipements r√©seau avec filtres multiples.",
            'search_alerts.*recherche globale': "Recherche intelligente dans les alertes avec filtrage par s√©v√©rit√© et p√©riode.",
            'search_topologies.*recherche globale': "Recherche dans les topologies d√©couvertes avec filtres g√©ographiques.",
            'search_configurations.*recherche globale': "Recherche textuelle avanc√©e dans les configurations avec expressions r√©guli√®res.",
            'clear.*recherche globale': "Supprime d√©finitivement tout l'historique de recherche pour conformit√© RGPD.",
            
            # Topology endpoints
            'start.*d√©couverte de topologie': "Lance l'ex√©cution du processus de d√©couverte avec monitoring temps r√©el.",
            'stop.*d√©couverte de topologie': "Interrompt proprement le processus en cours en sauvegardant les r√©sultats partiels.",
            'status.*d√©couverte de topologie': "R√©cup√®re l'√©tat actuel : progression, √©quipements trouv√©s, erreurs et temps estim√©.",
            'export.*d√©couverte de topologie': "Exporte les r√©sultats dans diff√©rents formats avec m√©tadonn√©es compl√®tes.",
            
            # Prometheus endpoints
            'query.*m√©trique Prometheus': "Ex√©cute une requ√™te PromQL en temps r√©el avec support des fonctions d'agr√©gation.",
            'query_range.*m√©trique Prometheus': "Ex√©cute une requ√™te PromQL sur plage temporelle pour analyse historique.",
            'targets.*m√©trique Prometheus': "Liste toutes les cibles de scraping avec leurs statuts de sant√©.",
            'alerts.*m√©trique Prometheus': "R√©cup√®re toutes les alertes en cours avec niveaux de s√©v√©rit√© et actions recommand√©es.",
            'status.*m√©trique Prometheus': "V√©rifie la sant√© du service : version, uptime, performance et statistiques.",
            
            # Grafana endpoints
            'setup.*dashboard Grafana': "Configure automatiquement Grafana avec sources de donn√©es et dashboards par d√©faut.",
            'status.*dashboard Grafana': "V√©rifie la connectivit√© et sant√© du service avec informations de version.",
            
            # Security endpoints
            'status.*configuration Fail2ban': "V√©rifie le statut du service avec statistiques globales et sant√© des jails.",
            'ban_ip.*configuration Fail2ban': "Ajoute une adresse IP √† la liste de bannissement avec dur√©e configurable.",
            'unban_ip.*configuration Fail2ban': "Retire une adresse IP de la liste de bannissement et restaure l'acc√®s.",
            'banned.*configuration Fail2ban': "R√©cup√®re toutes les IPs bannies avec d√©tails des violations et dur√©es restantes.",
            'alerts.*configuration Fail2ban': "R√©cup√®re les alertes de s√©curit√© d√©tect√©es avec d√©tails des attaques.",
            'add_rule.*configuration Fail2ban': "Ajoute et active imm√©diatement une nouvelle r√®gle sans red√©marrage.",
            'reload.*configuration Fail2ban': "Recharge toutes les r√®gles depuis les fichiers de configuration.",
        }
        
        # Descriptions g√©n√©riques am√©lior√©es par action
        self.action_templates = {
            'list': "R√©cup√®re la liste compl√®te des {resource} avec filtrage, tri et pagination avanc√©e.",
            'create': "Cr√©e un nouveau {resource} avec validation des donn√©es et configuration automatique.",
            'retrieve': "R√©cup√®re les d√©tails complets d'un {resource} sp√©cifique avec donn√©es temps r√©el.",
            'update': "Met √† jour un {resource} existant avec validation des changements et historique.",
            'partial_update': "Met √† jour partiellement un {resource} avec validation des champs modifi√©s.",
            'destroy': "Supprime d√©finitivement un {resource} apr√®s v√©rification des d√©pendances.",
            'get': "R√©cup√®re les informations d√©taill√©es avec donn√©es temps r√©el et m√©triques associ√©es.",
            'post': "Ex√©cute une op√©ration avec validation des donn√©es et traitement s√©curis√©.",
            'put': "Met √† jour compl√®tement la ressource avec v√©rification des permissions d'acc√®s.",
            'patch': "Applique des modifications partielles avec validation et audit des changements.",
            'delete': "Supprime la ressource avec sauvegarde pr√©alable et v√©rification des d√©pendances.",
        }
    
    def improve_all_descriptions(self):
        """Am√©liore toutes les descriptions Swagger."""
        print("üîß === AM√âLIORATION DES DESCRIPTIONS SWAGGER ===\n")
        
        view_files = [
            'dashboard_views.py',
            'device_management_views.py', 
            'search_views.py',
            'topology_discovery_views.py',
            'prometheus_views.py',
            'grafana_views.py',
            'security_views.py'
        ]
        
        base_path = Path(__file__).parent.parent / "views"
        
        for file_name in view_files:
            file_path = base_path / file_name
            if file_path.exists():
                print(f"üìù Am√©lioration de {file_name}...")
                self._improve_file_descriptions(file_path)
            else:
                print(f"‚ö†Ô∏è Fichier non trouv√©: {file_name}")
        
        self._print_summary()
    
    def _improve_file_descriptions(self, file_path: Path):
        """Am√©liore les descriptions dans un fichier."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # Remplacer les descriptions g√©n√©riques
            content = self._replace_generic_descriptions(content)
            
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                self.files_modified.append(str(file_path))
                print(f"  ‚úÖ {file_path.name} am√©lior√©")
            else:
                print(f"  ‚ÑπÔ∏è {file_path.name} d√©j√† optimal")
                
        except Exception as e:
            print(f"  ‚ùå Erreur: {e}")
    
    def _replace_generic_descriptions(self, content: str) -> str:
        """Remplace les descriptions g√©n√©riques."""
        # Pattern pour les descriptions g√©n√©riques
        pattern = r'operation_description="Ex√©cute l\'action (\w+) sur ([^"]+)\."'
        
        def replace_func(match):
            action = match.group(1)
            resource = match.group(2)
            
            # Chercher une description sp√©cifique
            for key, desc in self.specific_descriptions.items():
                if re.search(key, f"{action}.*{resource}"):
                    self.improvements_count += 1
                    return f'operation_description="{desc}"'
            
            # Utiliser template g√©n√©rique am√©lior√©
            if action in self.action_templates:
                improved_desc = self.action_templates[action].format(resource=resource)
            else:
                improved_desc = f"Effectue l'op√©ration {action} sur {resource} avec traitement s√©curis√© et validation des donn√©es."
            
            self.improvements_count += 1
            return f'operation_description="{improved_desc}"'
        
        return re.sub(pattern, replace_func, content)
    
    def _print_summary(self):
        """Affiche le r√©sum√©."""
        print("\n" + "="*60)
        print("üìä === R√âSUM√â DES AM√âLIORATIONS ===")
        print("="*60)
        
        print(f"\n‚ú® **AM√âLIORATIONS APPLIQU√âES**")
        print(f"  ‚Ä¢ Descriptions am√©lior√©es: {self.improvements_count}")
        print(f"  ‚Ä¢ Fichiers modifi√©s: {len(self.files_modified)}")
        
        if self.files_modified:
            print(f"\nüìù **FICHIERS AM√âLIOR√âS**")
            for file_path in self.files_modified:
                print(f"  ‚Ä¢ {Path(file_path).name}")
        
        print(f"\nüéØ **R√âSULTAT**")
        print(f"  ‚Ä¢ Descriptions sp√©cifiques et informatives")
        print(f"  ‚Ä¢ Documentation professionnelle en fran√ßais")
        print(f"  ‚Ä¢ Terminologie technique pr√©cise")
        
        print(f"\n‚úÖ Am√©lioration termin√©e!")


def main():
    """Point d'entr√©e principal."""
    improver = SwaggerDescriptionImprover()
    improver.improve_all_descriptions()


if __name__ == "__main__":
    main()
 