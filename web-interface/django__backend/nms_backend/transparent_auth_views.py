"""
Vues d'authentification transparente pour le Network Management System.

Ce module fournit les endpoints API pour l'authentification transparente
permettant au frontend React de se connecter automatiquement aux APIs Django.
"""

import logging
import json
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.core.exceptions import ValidationError
from django.conf import settings
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework import status

logger = logging.getLogger(__name__)


@swagger_auto_schema(
    method='post',
    operation_summary="Authentification transparente",
    operation_description="""
    Authentifie un utilisateur de mani√®re transparente en cr√©ant automatiquement
    un super_utilisateur Django si n√©cessaire. Permet l'acc√®s complet aux APIs.
    
    **Fonctionnalit√©s :**
    - Cr√©ation automatique de super_utilisateur Django
    - Authentification transparente sans configuration manuelle
    - Acc√®s complet √† toutes les APIs backend
    - Gestion s√©curis√©e des mots de passe
    """,
    tags=['Authentification'],
    request_body=openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'username': openapi.Schema(type=openapi.TYPE_STRING, description='Nom d\'utilisateur'),
            'password': openapi.Schema(type=openapi.TYPE_STRING, description='Mot de passe'),
            'email': openapi.Schema(type=openapi.TYPE_STRING, description='Email (optionnel)')
        },
        required=['username', 'password']
    ),
    responses={
        200: openapi.Response(
            description='Authentification r√©ussie',
            schema=openapi.Schema(type=openapi.TYPE_OBJECT, properties={
                'success': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Succ√®s'),
                'user': openapi.Schema(type=openapi.TYPE_OBJECT, properties={
                    'id': openapi.Schema(type=openapi.TYPE_INTEGER, description='ID utilisateur'),
                    'username': openapi.Schema(type=openapi.TYPE_STRING, description='Nom d\'utilisateur'),
                    'email': openapi.Schema(type=openapi.TYPE_STRING, description='Email'),
                    'is_superuser': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Super utilisateur'),
                    'is_staff': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Staff'),
                }),
                'transparent_auth': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Authentification transparente'),
                'message': openapi.Schema(type=openapi.TYPE_STRING, description='Message de succ√®s')
            })
        ),
        400: "Donn√©es invalides",
        401: "Identifiants invalides",
        500: "Erreur serveur"
    }
)
@api_view(['POST'])
@permission_classes([AllowAny])
def transparent_login(request):
    """
    Endpoint pour l'authentification transparente.
    """
    try:
        # Extraire les donn√©es de connexion
        data = request.data
        username = data.get('username')
        password = data.get('password')
        email = data.get('email', f"{username}@nms.local")
        
        if not username or not password:
            return Response({
                'error': 'Nom d\'utilisateur et mot de passe requis',
                'transparent_auth': False
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Cr√©er ou r√©cup√©rer l'utilisateur Django
        user = get_or_create_superuser(username, email, password)
        
        if user:
            # Authentifier l'utilisateur
            authenticated_user = authenticate(
                request, 
                username=username, 
                password=password
            )
            
            if authenticated_user:
                login(request, authenticated_user)
                logger.info(f"‚úÖ Utilisateur {username} connect√© avec succ√®s (transparent)")
                
                return Response({
                    'success': True,
                    'user': {
                        'id': user.id,
                        'username': user.username,
                        'email': user.email,
                        'is_superuser': user.is_superuser,
                        'is_staff': user.is_staff,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                    },
                    'transparent_auth': True,
                    'message': 'Connexion r√©ussie avec acc√®s complet aux APIs',
                    'api_access': {
                        'all_modules': True,
                        'superuser_privileges': True,
                        'api_documentation': '/swagger/',
                        'endpoints_count': '200+',
                        'features': [
                            'AI Assistant',
                            'Monitoring temps r√©el',
                            'GNS3 Integration',
                            'Security Management',
                            'Reporting avanc√©',
                            'QoS Management'
                        ]
                    }
                })
            else:
                logger.warning(f"‚ùå √âchec d'authentification pour {username}")
                return Response({
                    'error': 'Identifiants invalides',
                    'transparent_auth': False
                }, status=status.HTTP_401_UNAUTHORIZED)
        else:
            return Response({
                'error': 'Impossible de cr√©er ou r√©cup√©rer l\'utilisateur',
                'transparent_auth': False
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'authentification transparente : {e}")
        return Response({
            'error': 'Erreur interne du serveur',
            'transparent_auth': False
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@swagger_auto_schema(
    method='post',
    operation_summary="D√©connexion",
    operation_description="D√©connecte l'utilisateur de la session Django",
    tags=['Authentification'],
    responses={
        200: openapi.Response(
            description='D√©connexion r√©ussie',
            schema=openapi.Schema(type=openapi.TYPE_OBJECT, properties={
                'success': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Succ√®s'),
                'message': openapi.Schema(type=openapi.TYPE_STRING, description='Message de succ√®s')
            })
        )
    }
)
@api_view(['POST'])
def transparent_logout(request):
    """
    Endpoint pour la d√©connexion.
    """
    try:
        if request.user.is_authenticated:
            username = request.user.username
            logout(request)
            logger.info(f"üëã Utilisateur {username} d√©connect√©")
            
            return Response({
                'success': True,
                'message': 'D√©connexion r√©ussie'
            })
        else:
            return Response({
                'success': True,
                'message': 'Aucune session active'
            })
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la d√©connexion : {e}")
        return Response({
            'error': 'Erreur interne du serveur'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@swagger_auto_schema(
    method='get',
    operation_summary="Informations utilisateur",
    operation_description="R√©cup√®re les informations de l'utilisateur connect√©",
    tags=['Authentification'],
    responses={
        200: openapi.Response(
            description='Informations utilisateur',
            schema=openapi.Schema(type=openapi.TYPE_OBJECT, properties={
                'authenticated': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Authentifi√©'),
                'user': openapi.Schema(type=openapi.TYPE_OBJECT, properties={
                    'id': openapi.Schema(type=openapi.TYPE_INTEGER, description='ID utilisateur'),
                    'username': openapi.Schema(type=openapi.TYPE_STRING, description='Nom d\'utilisateur'),
                    'email': openapi.Schema(type=openapi.TYPE_STRING, description='Email'),
                    'is_superuser': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Super utilisateur'),
                    'is_staff': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Staff'),
                })
            })
        ),
        401: "Non authentifi√©"
    }
)
@api_view(['GET'])
def user_info(request):
    """
    Endpoint pour r√©cup√©rer les informations de l'utilisateur connect√©.
    """
    try:
        if request.user.is_authenticated:
            return Response({
                'authenticated': True,
                'user': {
                    'id': request.user.id,
                    'username': request.user.username,
                    'email': request.user.email,
                    'is_superuser': request.user.is_superuser,
                    'is_staff': request.user.is_staff,
                    'first_name': request.user.first_name,
                    'last_name': request.user.last_name,
                    'last_login': request.user.last_login,
                    'date_joined': request.user.date_joined,
                },
                'session_info': {
                    'session_key': request.session.session_key,
                    'session_age': request.session.get_expiry_age(),
                },
                'api_access': {
                    'all_modules': True,
                    'superuser_privileges': request.user.is_superuser,
                    'api_documentation': '/swagger/',
                    'total_endpoints': '200+',
                    'available_modules': [
                        'AI Assistant',
                        'Monitoring',
                        'GNS3 Integration',
                        'Security Management',
                        'Reporting',
                        'QoS Management',
                        'Network Management',
                        'Dashboard',
                        'API Clients',
                        'API Views',
                        'Common Infrastructure'
                    ]
                }
            })
        else:
            return Response({
                'authenticated': False,
                'message': 'Non authentifi√©'
            }, status=status.HTTP_401_UNAUTHORIZED)
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des informations utilisateur : {e}")
        return Response({
            'error': 'Erreur interne du serveur'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@swagger_auto_schema(
    method='post',
    operation_summary="Inscription transparente",
    operation_description="""
    Cr√©e un nouveau compte utilisateur avec privil√®ges super_utilisateur Django.
    
    **Fonctionnalit√©s :**
    - Cr√©ation automatique de super_utilisateur Django
    - Validation des donn√©es d'inscription
    - Authentification automatique apr√®s inscription
    - Acc√®s complet √† toutes les APIs backend
    """,
    tags=['Authentification'],
    request_body=openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'username': openapi.Schema(type=openapi.TYPE_STRING, description='Nom d\'utilisateur'),
            'email': openapi.Schema(type=openapi.TYPE_STRING, description='Email'),
            'password': openapi.Schema(type=openapi.TYPE_STRING, description='Mot de passe'),
            'first_name': openapi.Schema(type=openapi.TYPE_STRING, description='Pr√©nom (optionnel)'),
            'last_name': openapi.Schema(type=openapi.TYPE_STRING, description='Nom (optionnel)')
        },
        required=['username', 'email', 'password']
    ),
    responses={
        201: openapi.Response(
            description='Inscription r√©ussie',
            schema=openapi.Schema(type=openapi.TYPE_OBJECT, properties={
                'success': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Succ√®s'),
                'user': openapi.Schema(type=openapi.TYPE_OBJECT, properties={
                    'id': openapi.Schema(type=openapi.TYPE_INTEGER, description='ID utilisateur'),
                    'username': openapi.Schema(type=openapi.TYPE_STRING, description='Nom d\'utilisateur'),
                    'email': openapi.Schema(type=openapi.TYPE_STRING, description='Email'),
                    'is_superuser': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Super utilisateur'),
                }),
                'message': openapi.Schema(type=openapi.TYPE_STRING, description='Message de succ√®s')
            })
        ),
        400: "Donn√©es invalides",
        409: "Utilisateur d√©j√† existant",
        500: "Erreur serveur"
    }
)
@api_view(['POST'])
@permission_classes([AllowAny])
def transparent_register(request):
    """
    Endpoint pour l'inscription transparente.
    """
    try:
        # Extraire les donn√©es d'inscription
        data = request.data
        username = data.get('username')
        email = data.get('email')
        password = data.get('password')
        first_name = data.get('first_name', '')
        last_name = data.get('last_name', '')
        
        if not username or not email or not password:
            return Response({
                'error': 'Nom d\'utilisateur, email et mot de passe requis',
                'transparent_auth': False
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # V√©rifier si l'utilisateur existe d√©j√†
        if User.objects.filter(username=username).exists():
            return Response({
                'error': 'Un utilisateur avec ce nom d\'utilisateur existe d√©j√†',
                'transparent_auth': False
            }, status=status.HTTP_409_CONFLICT)
        
        if User.objects.filter(email=email).exists():
            return Response({
                'error': 'Un utilisateur avec cet email existe d√©j√†',
                'transparent_auth': False
            }, status=status.HTTP_409_CONFLICT)
        
        # Cr√©er le nouvel utilisateur
        user = User.objects.create_user(
            username=username,
            email=email,
            password=password,
            first_name=first_name,
            last_name=last_name,
            is_superuser=True,
            is_staff=True,
            is_active=True
        )
        
        logger.info(f"üÜï Nouveau super_utilisateur cr√©√© : {username}")
        
        # Authentifier automatiquement l'utilisateur
        authenticated_user = authenticate(
            request, 
            username=username, 
            password=password
        )
        
        if authenticated_user:
            login(request, authenticated_user)
            
            return Response({
                'success': True,
                'user': {
                    'id': user.id,
                    'username': user.username,
                    'email': user.email,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'is_superuser': user.is_superuser,
                    'is_staff': user.is_staff,
                },
                'transparent_auth': True,
                'message': 'Inscription r√©ussie avec acc√®s complet aux APIs',
                'api_access': {
                    'all_modules': True,
                    'superuser_privileges': True,
                    'api_documentation': '/swagger/',
                    'endpoints_count': '200+',
                    'auto_authenticated': True
                }
            }, status=status.HTTP_201_CREATED)
        else:
            return Response({
                'error': 'Utilisateur cr√©√© mais √©chec d\'authentification',
                'transparent_auth': False
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
            
    except ValidationError as e:
        logger.error(f"‚ùå Erreur de validation lors de l'inscription : {e}")
        return Response({
            'error': 'Donn√©es invalides',
            'details': str(e),
            'transparent_auth': False
        }, status=status.HTTP_400_BAD_REQUEST)
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'inscription transparente : {e}")
        return Response({
            'error': 'Erreur interne du serveur',
            'transparent_auth': False
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


def get_or_create_superuser(username, email, password):
    """
    Cr√©e ou r√©cup√®re un super_utilisateur Django.
    """
    try:
        # V√©rifier si l'utilisateur existe d√©j√†
        try:
            user = User.objects.get(username=username)
            logger.info(f"üë§ Utilisateur {username} trouv√© (existant)")
            
            # Mettre √† jour le mot de passe si n√©cessaire
            if not user.check_password(password):
                user.set_password(password)
                user.save()
                logger.info(f"üîí Mot de passe mis √† jour pour {username}")
            
            # S'assurer que l'utilisateur est super_utilisateur
            if not user.is_superuser or not user.is_staff:
                user.is_superuser = True
                user.is_staff = True
                user.is_active = True
                user.save()
                logger.info(f"‚ö° Privil√®ges super_utilisateur accord√©s √† {username}")
            
            return user
            
        except User.DoesNotExist:
            # Cr√©er un nouvel utilisateur
            user = User.objects.create_user(
                username=username,
                email=email,
                password=password,
                is_superuser=True,
                is_staff=True,
                is_active=True
            )
            logger.info(f"üÜï Nouveau super_utilisateur cr√©√© : {username}")
            return user
            
    except ValidationError as e:
        logger.error(f"‚ùå Erreur de validation lors de la cr√©ation de l'utilisateur : {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation/r√©cup√©ration de l'utilisateur : {e}")
        return None