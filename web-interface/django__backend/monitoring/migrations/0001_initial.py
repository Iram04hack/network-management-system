# Generated by Django 4.2.23 on 2025-06-23 15:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("network_management", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BusinessKPI",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "formula",
                    models.TextField(
                        help_text="Expression pour calculer le KPI à partir de métriques",
                        verbose_name="Formule",
                    ),
                ),
                (
                    "target_value",
                    models.FloatField(
                        help_text="Valeur cible à atteindre",
                        verbose_name="Valeur cible",
                    ),
                ),
                (
                    "acceptable_range",
                    models.FloatField(
                        help_text="Plage acceptable autour de la valeur cible",
                        verbose_name="Plage acceptable",
                    ),
                ),
                (
                    "metrics_mapping",
                    models.JSONField(
                        default=dict,
                        help_text="Mapping entre variables et IDs de métriques",
                        verbose_name="Mappage des métriques",
                    ),
                ),
                (
                    "refresh_interval_seconds",
                    models.IntegerField(
                        default=300,
                        help_text="Intervalle de rafraîchissement en secondes",
                        verbose_name="Intervalle de rafraîchissement (secondes)",
                    ),
                ),
                (
                    "unit",
                    models.CharField(blank=True, max_length=50, verbose_name="Unité"),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Catégorie"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="business_kpis",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Propriétaire",
                    ),
                ),
            ],
            options={
                "verbose_name": "KPI Métier",
                "verbose_name_plural": "KPIs Métier",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Titre")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("layout", models.JSONField(default=dict, verbose_name="Disposition")),
                (
                    "is_default",
                    models.BooleanField(default=False, verbose_name="Par défaut"),
                ),
                (
                    "uid",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Identifiant unique"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(default=False, verbose_name="Public"),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Catégorie"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="monitoring_dashboards",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Propriétaire",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tableau de bord",
                "verbose_name_plural": "Tableaux de bord",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="DeviceMetric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "collection_interval",
                    models.IntegerField(
                        default=60, verbose_name="Intervalle de collecte (secondes)"
                    ),
                ),
                (
                    "last_collection",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernière collecte"
                    ),
                ),
                (
                    "next_collection",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Prochaine collecte"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "custom_parameters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        verbose_name="Paramètres personnalisés",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="monitoring_metrics",
                        to="network_management.networkdevice",
                        verbose_name="Équipement",
                    ),
                ),
                (
                    "interface",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="monitoring_metrics",
                        to="network_management.networkinterface",
                        verbose_name="Interface",
                    ),
                ),
            ],
            options={
                "verbose_name": "Métrique d'équipement",
                "verbose_name_plural": "Métriques d'équipement",
            },
        ),
        migrations.CreateModel(
            name="MetricsDefinition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("counter", "Compteur"),
                            ("gauge", "Gauge"),
                            ("histogram", "Histogramme"),
                            ("summary", "Résumé"),
                            ("text", "Texte"),
                            ("boolean", "Booléen"),
                        ],
                        max_length=20,
                        verbose_name="Type de métrique",
                    ),
                ),
                (
                    "collection_method",
                    models.CharField(
                        max_length=100, verbose_name="Méthode de collecte"
                    ),
                ),
                (
                    "collection_parameters",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Paramètres de collecte"
                    ),
                ),
                (
                    "unit",
                    models.CharField(blank=True, max_length=50, verbose_name="Unité"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "retention_days",
                    models.IntegerField(default=30, verbose_name="Jours de rétention"),
                ),
                (
                    "warning_threshold",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Seuil d'avertissement",
                    ),
                ),
                (
                    "critical_threshold",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Seuil critique",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
            ],
            options={
                "verbose_name": "Définition de métrique",
                "verbose_name_plural": "Définitions de métriques",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MonitoringTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "check_interval",
                    models.IntegerField(
                        default=300,
                        verbose_name="Intervalle de vérification (secondes)",
                    ),
                ),
                (
                    "retry_interval",
                    models.IntegerField(
                        default=60, verbose_name="Intervalle de réessai (secondes)"
                    ),
                ),
                (
                    "max_check_attempts",
                    models.IntegerField(
                        default=3, verbose_name="Nombre maximum de tentatives"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "notification_enabled",
                    models.BooleanField(
                        default=True, verbose_name="Notifications activées"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
            ],
            options={
                "verbose_name": "Template de surveillance",
                "verbose_name_plural": "Templates de surveillance",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="NotificationChannel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "channel_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("webhook", "Webhook"),
                            ("slack", "Slack"),
                            ("teams", "Microsoft Teams"),
                            ("telegram", "Telegram"),
                            ("pushover", "Pushover"),
                            ("custom", "Personnalisé"),
                        ],
                        max_length=50,
                        verbose_name="Type de canal",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "config",
                    models.JSONField(default=dict, verbose_name="Configuration"),
                ),
                (
                    "min_level",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Avertissement"),
                            ("critical", "Critique"),
                            ("all", "Tous"),
                        ],
                        default="warning",
                        max_length=20,
                        verbose_name="Niveau minimum",
                    ),
                ),
                (
                    "schedule",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Planification"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_channels",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Canal de notification",
                "verbose_name_plural": "Canaux de notification",
                "ordering": ["name"],
                "unique_together": {("user", "name")},
            },
        ),
        migrations.CreateModel(
            name="ThresholdRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "warning_threshold",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Seuil d'avertissement"
                    ),
                ),
                (
                    "critical_threshold",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Seuil critique"
                    ),
                ),
                (
                    "comparison_operator",
                    models.CharField(
                        choices=[
                            (">", "Supérieur"),
                            ("<", "Inférieur"),
                            (">=", "Supérieur ou égal"),
                            ("<=", "Inférieur ou égal"),
                            ("==", "Égal"),
                            ("!=", "Différent"),
                        ],
                        default=">",
                        max_length=10,
                        verbose_name="Opérateur de comparaison",
                    ),
                ),
                (
                    "duration_seconds",
                    models.IntegerField(
                        default=0,
                        help_text="Durée en secondes pour déclencher l'alerte",
                        verbose_name="Durée (secondes)",
                    ),
                ),
                (
                    "recovery_threshold",
                    models.FloatField(
                        blank=True,
                        help_text="Seuil pour considérer l'alerte résolue",
                        null=True,
                        verbose_name="Seuil de récupération",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "device_metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="threshold_rules",
                        to="monitoring.devicemetric",
                        verbose_name="Métrique d'équipement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Règle de seuil",
                "verbose_name_plural": "Règles de seuil",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceCheck",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "check_type",
                    models.CharField(
                        choices=[
                            ("ping", "ICMP Ping"),
                            ("tcp", "TCP Port"),
                            ("http", "HTTP/HTTPS"),
                            ("snmp", "SNMP"),
                            ("ssh", "SSH"),
                            ("dns", "DNS"),
                            ("ssl", "Certificat SSL"),
                            ("process", "Processus"),
                            ("disk", "Espace disque"),
                            ("memory", "Mémoire"),
                            ("cpu", "CPU"),
                            ("custom", "Script personnalisé"),
                        ],
                        max_length=20,
                        verbose_name="Type de vérification",
                    ),
                ),
                (
                    "check_command",
                    models.CharField(
                        max_length=255, verbose_name="Commande de vérification"
                    ),
                ),
                (
                    "check_parameters",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Paramètres de la commande"
                    ),
                ),
                (
                    "warning_threshold",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Seuil d'avertissement"
                    ),
                ),
                (
                    "critical_threshold",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Seuil critique"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="service_checks",
                        to="monitoring.monitoringtemplate",
                        verbose_name="Template",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vérification de service",
                "verbose_name_plural": "Vérifications de service",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="NotificationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "alert_filter",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Filtre d'alertes"
                    ),
                ),
                (
                    "device_filter",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Filtre d'équipements"
                    ),
                ),
                (
                    "severity_threshold",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Avertissement"),
                            ("critical", "Critique"),
                        ],
                        default="warning",
                        max_length=20,
                        verbose_name="Seuil de sévérité",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "quiet_period",
                    models.IntegerField(
                        default=0, verbose_name="Période de silence (minutes)"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "channels",
                    models.ManyToManyField(
                        related_name="rules",
                        to="monitoring.notificationchannel",
                        verbose_name="Canaux",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_rules",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Règle de notification",
                "verbose_name_plural": "Règles de notification",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MetricThreshold",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "threshold_type",
                    models.CharField(
                        choices=[
                            ("static", "Statique"),
                            ("dynamic", "Dynamique"),
                            ("baseline", "Baseline"),
                        ],
                        max_length=20,
                        verbose_name="Type de seuil",
                    ),
                ),
                (
                    "warning_value",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Valeur d'avertissement"
                    ),
                ),
                (
                    "critical_value",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Valeur critique"
                    ),
                ),
                (
                    "comparison",
                    models.CharField(
                        choices=[
                            ("gt", "Supérieur à"),
                            ("lt", "Inférieur à"),
                            ("eq", "Égal à"),
                            ("ne", "Différent de"),
                            ("ge", "Supérieur ou égal à"),
                            ("le", "Inférieur ou égal à"),
                        ],
                        default="gt",
                        max_length=2,
                        verbose_name="Comparaison",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "metrics_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="thresholds",
                        to="monitoring.metricsdefinition",
                        verbose_name="Définition de métrique",
                    ),
                ),
            ],
            options={
                "verbose_name": "Seuil de métrique",
                "verbose_name_plural": "Seuils de métriques",
                "ordering": ["metrics_definition", "threshold_type"],
            },
        ),
        migrations.CreateModel(
            name="DeviceServiceCheck",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "override_parameters",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Paramètres personnalisés"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "last_check_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernière vérification"
                    ),
                ),
                (
                    "next_check_time",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Prochaine vérification"
                    ),
                ),
                (
                    "last_status",
                    models.CharField(
                        default="unknown", max_length=50, verbose_name="Dernier statut"
                    ),
                ),
                (
                    "last_check_output",
                    models.TextField(
                        blank=True, null=True, verbose_name="Dernier résultat"
                    ),
                ),
                (
                    "current_check_attempt",
                    models.IntegerField(default=0, verbose_name="Tentative actuelle"),
                ),
                (
                    "notification_enabled",
                    models.BooleanField(
                        default=True, verbose_name="Notifications activées"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="network_management.networkdevice",
                        verbose_name="Équipement",
                    ),
                ),
                (
                    "service_check",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="monitoring.servicecheck",
                        verbose_name="Vérification de service",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vérification de service d'équipement",
                "verbose_name_plural": "Vérifications de service d'équipement",
                "unique_together": {("device", "service_check")},
            },
        ),
        migrations.AddField(
            model_name="devicemetric",
            name="metric",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="monitoring.metricsdefinition",
                verbose_name="Métrique",
            ),
        ),
        migrations.CreateModel(
            name="DashboardWidget",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Titre")),
                (
                    "widget_type",
                    models.CharField(
                        choices=[
                            ("chart", "Graphique"),
                            ("gauge", "Jauge"),
                            ("table", "Table"),
                            ("status", "Statut"),
                            ("map", "Carte"),
                            ("text", "Texte"),
                            ("alert_list", "Liste d'alertes"),
                            ("device_list", "Liste d'équipements"),
                            ("metric_value", "Valeur de métrique"),
                            ("custom", "Personnalisé"),
                        ],
                        max_length=50,
                        verbose_name="Type de widget",
                    ),
                ),
                ("position", models.JSONField(default=dict, verbose_name="Position")),
                (
                    "config",
                    models.JSONField(default=dict, verbose_name="Configuration"),
                ),
                (
                    "data_source",
                    models.JSONField(default=dict, verbose_name="Source de données"),
                ),
                (
                    "refresh_interval",
                    models.IntegerField(
                        default=60,
                        verbose_name="Intervalle de rafraîchissement (secondes)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="widgets",
                        to="monitoring.dashboard",
                        verbose_name="Tableau de bord",
                    ),
                ),
            ],
            options={
                "verbose_name": "Widget de tableau de bord",
                "verbose_name_plural": "Widgets de tableau de bord",
                "ordering": ["dashboard", "title"],
            },
        ),
        migrations.CreateModel(
            name="CheckResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ok", "OK"),
                            ("warning", "Avertissement"),
                            ("critical", "Critique"),
                            ("unknown", "Inconnu"),
                        ],
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                ("output", models.TextField(verbose_name="Résultat")),
                (
                    "performance_data",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Données de performance"
                    ),
                ),
                (
                    "execution_time",
                    models.FloatField(
                        default=0.0, verbose_name="Temps d'exécution (secondes)"
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Horodatage"
                    ),
                ),
                (
                    "device_service_check",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="monitoring.deviceservicecheck",
                        verbose_name="Vérification de service",
                    ),
                ),
            ],
            options={
                "verbose_name": "Résultat de vérification",
                "verbose_name_plural": "Résultats de vérification",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AnomalyDetectionConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "algorithm",
                    models.CharField(
                        choices=[
                            ("isolation_forest", "Isolation Forest"),
                            ("z_score", "Z-Score"),
                            ("moving_average", "Moyenne Mobile"),
                            ("lstm", "LSTM Neural Network"),
                            ("arima", "ARIMA"),
                            ("auto", "Auto-détection"),
                        ],
                        max_length=50,
                        verbose_name="Algorithme",
                    ),
                ),
                (
                    "sensitivity",
                    models.FloatField(
                        default=0.5,
                        help_text="Sensibilité de 0.0 à 1.0",
                        verbose_name="Sensibilité",
                    ),
                ),
                (
                    "training_window_days",
                    models.IntegerField(
                        default=30,
                        help_text="Jours de données historiques pour l'entraînement",
                        verbose_name="Fenêtre d'entraînement (jours)",
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Paramètres spécifiques à l'algorithme",
                        verbose_name="Paramètres",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "last_training",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernier entraînement"
                    ),
                ),
                (
                    "model_accuracy",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Précision du modèle"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "device_metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="anomaly_configs",
                        to="monitoring.devicemetric",
                        verbose_name="Métrique d'équipement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuration de détection d'anomalies",
                "verbose_name_plural": "Configurations de détection d'anomalies",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Alert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("critical", "Critique"),
                            ("high", "Haute"),
                            ("medium", "Moyenne"),
                            ("low", "Basse"),
                            ("info", "Information"),
                        ],
                        max_length=20,
                        verbose_name="Sévérité",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("acknowledged", "Prise en compte"),
                            ("resolved", "Résolue"),
                            ("closed", "Fermée"),
                            ("false_positive", "Faux positif"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                ("message", models.TextField(verbose_name="Message")),
                (
                    "value",
                    models.CharField(blank=True, max_length=255, verbose_name="Valeur"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Date de création",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de résolution"
                    ),
                ),
                (
                    "acknowledged_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de prise en compte"
                    ),
                ),
                (
                    "acknowledgement_comment",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Commentaire de prise en compte",
                    ),
                ),
                (
                    "resolution_comment",
                    models.TextField(
                        blank=True, null=True, verbose_name="Commentaire de résolution"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Métadonnées"
                    ),
                ),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="acknowledged_alerts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Pris en compte par",
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="monitoring_alerts",
                        to="network_management.networkdevice",
                        verbose_name="Équipement",
                    ),
                ),
                (
                    "metric",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="alerts",
                        to="monitoring.metricsdefinition",
                        verbose_name="Métrique",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_alerts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Résolu par",
                    ),
                ),
                (
                    "service_check",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="alerts",
                        to="monitoring.servicecheck",
                        verbose_name="Vérification de service",
                    ),
                ),
            ],
            options={
                "verbose_name": "Alerte",
                "verbose_name_plural": "Alertes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SavedView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "parameters",
                    models.JSONField(default=dict, verbose_name="Paramètres"),
                ),
                (
                    "view_type",
                    models.CharField(max_length=50, verbose_name="Type de vue"),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, verbose_name="Par défaut"),
                ),
                (
                    "is_shared",
                    models.BooleanField(default=False, verbose_name="Partagée"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date de mise à jour"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="saved_views",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vue sauvegardée",
                "verbose_name_plural": "Vues sauvegardées",
                "ordering": ["user", "name"],
                "unique_together": {("user", "name", "view_type")},
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Titre")),
                ("message", models.TextField(verbose_name="Message")),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Avertissement"),
                            ("critical", "Critique"),
                        ],
                        default="info",
                        max_length=20,
                        verbose_name="Niveau",
                    ),
                ),
                ("source", models.CharField(max_length=100, verbose_name="Source")),
                ("is_read", models.BooleanField(default=False, verbose_name="Lu")),
                (
                    "action_url",
                    models.URLField(blank=True, null=True, verbose_name="URL d'action"),
                ),
                (
                    "action_text",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Texte d'action",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date de création"
                    ),
                ),
                (
                    "read_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de lecture"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Métadonnées"
                    ),
                ),
                (
                    "alert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notifications",
                        to="monitoring.alert",
                        verbose_name="Alerte associée",
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notifications",
                        to="network_management.networkdevice",
                        verbose_name="Équipement associé",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user"], name="monitoring__user_id_b3f18e_idx"
                    ),
                    models.Index(
                        fields=["is_read"], name="monitoring__is_read_56effb_idx"
                    ),
                    models.Index(fields=["level"], name="monitoring__level_33b8c6_idx"),
                    models.Index(
                        fields=["created_at"], name="monitoring__created_b498e4_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="MetricValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.FloatField(verbose_name="Valeur")),
                ("timestamp", models.DateTimeField(verbose_name="Horodatage")),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Métadonnées"
                    ),
                ),
                (
                    "device_metric",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values",
                        to="monitoring.devicemetric",
                        verbose_name="Métrique d'équipement",
                    ),
                ),
            ],
            options={
                "verbose_name": "Valeur de métrique",
                "verbose_name_plural": "Valeurs de métriques",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["device_metric", "-timestamp"],
                        name="monitoring__device__40c11b_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="monitoring__timesta_8618b1_idx"
                    ),
                    models.Index(
                        fields=["device_metric", "timestamp"],
                        name="monitoring__device__750b9b_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="KPIHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("calculated_value", models.FloatField(verbose_name="Valeur calculée")),
                (
                    "target_achievement",
                    models.FloatField(
                        help_text="Pourcentage d'atteinte de l'objectif",
                        verbose_name="Atteinte de l'objectif (%)",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Bon"),
                            ("warning", "Avertissement"),
                            ("critical", "Critique"),
                        ],
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                ("timestamp", models.DateTimeField(verbose_name="Horodatage")),
                (
                    "calculation_details",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Détails du calcul"
                    ),
                ),
                (
                    "kpi",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="monitoring.businesskpi",
                        verbose_name="KPI",
                    ),
                ),
            ],
            options={
                "verbose_name": "Historique KPI",
                "verbose_name_plural": "Historiques KPI",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["kpi", "-timestamp"],
                        name="monitoring__kpi_id_c0f531_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="monitoring__timesta_7aa740_idx"
                    ),
                    models.Index(
                        fields=["status"], name="monitoring__status_96585e_idx"
                    ),
                ],
            },
        ),
        migrations.AlterUniqueTogether(
            name="devicemetric",
            unique_together={("device", "metric", "interface")},
        ),
        migrations.AddIndex(
            model_name="dashboard",
            index=models.Index(fields=["owner"], name="monitoring__owner_i_8df09e_idx"),
        ),
        migrations.AddIndex(
            model_name="dashboard",
            index=models.Index(
                fields=["is_default"], name="monitoring__is_defa_e59d1a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboard",
            index=models.Index(
                fields=["is_public"], name="monitoring__is_publ_be55ce_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="checkresult",
            index=models.Index(
                fields=["device_service_check", "-timestamp"],
                name="monitoring__device__3e6231_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checkresult",
            index=models.Index(fields=["status"], name="monitoring__status_ff5ba2_idx"),
        ),
        migrations.AddIndex(
            model_name="checkresult",
            index=models.Index(
                fields=["timestamp"], name="monitoring__timesta_f21dd2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["device"], name="monitoring__device__acb051_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["severity"], name="monitoring__severit_1dbc15_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(fields=["status"], name="monitoring__status_d438e1_idx"),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["created_at"], name="monitoring__created_5d4886_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["device", "status"], name="monitoring__device__a2bebd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["status", "severity"], name="monitoring__status_d7b628_idx"
            ),
        ),
    ]
